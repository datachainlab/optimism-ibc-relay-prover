syntax = "proto3";
package ibc.lightclients.optimism.v1;
option go_package = "github.com/datachainlab/optimism-ibc-relay-prover/module/types";
option (gogoproto.goproto_getters_all) = false;

import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";
import "google/protobuf/duration.proto";

import "ibc/lightclients/ethereum/v1/ethereum.proto";

message L1Config {
  bytes genesis_validators_root = 1;
  uint64 min_sync_committee_participants = 2;
  uint64 genesis_time = 3;
  ethereum.v1.ForkParameters fork_parameters = 4;
  uint64 seconds_per_slot = 5;
  uint64 slots_per_epoch = 6;
  uint64 epochs_per_sync_committee_period = 7;

  ibc.lightclients.ethereum.v1.Fraction trust_level = 8;

  google.protobuf.Duration trusting_period = 9 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  google.protobuf.Duration max_clock_drift = 10 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

message FaultDisputeGameConfig {
  bytes dispute_game_factory_address = 1;
  uint32 dispute_game_factory_target_storage_slot = 2;
  uint32 fault_dispute_game_status_slot = 3;
  uint32 fault_dispute_game_status_slot_offset = 4;
  uint32 fault_dispute_game_created_at_slot_offset = 5;
  uint32 status_defender_win = 6;
}

message ClientState {
  uint64 chain_id = 1;

  bytes ibc_store_address = 2;
  bytes ibc_commitments_slot = 3;

  ibc.core.client.v1.Height latest_height = 4;

  bool frozen = 5;

  bytes rollup_config_json = 6;

  L1Config l1_config = 7;
  FaultDisputeGameConfig fault_dispute_game_config = 8;

}

message L1Header {
  ibc.lightclients.ethereum.v1.TrustedSyncCommittee trusted_sync_committee = 1;
  ibc.lightclients.ethereum.v1.ConsensusUpdate consensus_update = 2;
  ibc.lightclients.ethereum.v1.ExecutionUpdate execution_update = 3;
  uint64 timestamp = 4;
}

message Derivation {
  bytes agreed_l2_output_root = 1;
  bytes l2_output_root = 2;
  uint64 l2_block_number = 3;
}

message Header {
  ibc.core.client.v1.Height trusted_height = 1;
  AccountUpdate account_update = 2;

  Derivation derivation = 3;
  bytes preimages = 4;
  repeated L1Header trusted_to_deterministic = 5;
  repeated L1Header deterministic_to_latest = 6;
}

message ConsensusState {
  bytes storage_root = 1;
  uint64 timestamp = 2;
  bytes output_root = 3;

  uint64 l1_slot = 4;
  bytes l1_current_sync_committee = 5;
  bytes l1_next_sync_committee = 6;
  uint64 l1_timestamp = 7;

  uint64 l1_origin = 8;
}

message AccountUpdate {
  bytes account_proof = 1;
  bytes account_storage_root = 2;
}

message FaultDisputeGameFactoryProof {
  bytes state_root = 1;

  AccountUpdate dispute_game_factory_account = 3;
  bytes dispute_game_factory_storage_proof = 4;

  AccountUpdate fault_dispute_game_account = 5;
  bytes fault_dispute_game_storage_proof = 6;
  uint64 fault_dispute_game_source_game_type = 7;

}

message Misbehaviour {
  string client_id = 1;
  ibc.core.client.v1.Height trusted_height = 2;

  uint64 resolved_l2_number = 3;
  bytes resolved_output_root = 4;
  FaultDisputeGameFactoryProof fault_dispute_game_factory_proof = 5;
  L1Header latest_l1_header = 6;

  // Only for past game
  AccountUpdate first_l2_to_l1_message_passer_account = 7;
  AccountUpdate last_l2_to_l1_message_passer_account = 8;
  repeated bytes l2_header_history = 9;

  // Only for future game
  // L1 block which the resolved FaultDisputeGameFactory.create(gameType, output, l2_num) is called at
  FaultDisputeGameFactoryProof submitted_l1_proof = 10;
  repeated bytes l1_header_history = 11;
}


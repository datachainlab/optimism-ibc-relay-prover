// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/ethereum/v1/ethereum.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrustedSyncCommittee struct {
	SyncCommittee *SyncCommittee `protobuf:"bytes,2,opt,name=sync_committee,json=syncCommittee,proto3" json:"sync_committee,omitempty"`
	IsNext        bool           `protobuf:"varint,3,opt,name=is_next,json=isNext,proto3" json:"is_next,omitempty"`
}

func (m *TrustedSyncCommittee) Reset()         { *m = TrustedSyncCommittee{} }
func (m *TrustedSyncCommittee) String() string { return proto.CompactTextString(m) }
func (*TrustedSyncCommittee) ProtoMessage()    {}
func (*TrustedSyncCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{0}
}
func (m *TrustedSyncCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustedSyncCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustedSyncCommittee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustedSyncCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustedSyncCommittee.Merge(m, src)
}
func (m *TrustedSyncCommittee) XXX_Size() int {
	return m.Size()
}
func (m *TrustedSyncCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustedSyncCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_TrustedSyncCommittee proto.InternalMessageInfo

func (m *TrustedSyncCommittee) GetSyncCommittee() *SyncCommittee {
	if m != nil {
		return m.SyncCommittee
	}
	return nil
}

func (m *TrustedSyncCommittee) GetIsNext() bool {
	if m != nil {
		return m.IsNext
	}
	return false
}

type ForkParameters struct {
	GenesisForkVersion []byte  `protobuf:"bytes,1,opt,name=genesis_fork_version,json=genesisForkVersion,proto3" json:"genesis_fork_version,omitempty"`
	Forks              []*Fork `protobuf:"bytes,2,rep,name=forks,proto3" json:"forks,omitempty"`
}

func (m *ForkParameters) Reset()         { *m = ForkParameters{} }
func (m *ForkParameters) String() string { return proto.CompactTextString(m) }
func (*ForkParameters) ProtoMessage()    {}
func (*ForkParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{1}
}
func (m *ForkParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForkParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForkParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForkParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkParameters.Merge(m, src)
}
func (m *ForkParameters) XXX_Size() int {
	return m.Size()
}
func (m *ForkParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ForkParameters proto.InternalMessageInfo

func (m *ForkParameters) GetGenesisForkVersion() []byte {
	if m != nil {
		return m.GenesisForkVersion
	}
	return nil
}

func (m *ForkParameters) GetForks() []*Fork {
	if m != nil {
		return m.Forks
	}
	return nil
}

type Fraction struct {
	Numerator   uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *Fraction) Reset()         { *m = Fraction{} }
func (m *Fraction) String() string { return proto.CompactTextString(m) }
func (*Fraction) ProtoMessage()    {}
func (*Fraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{2}
}
func (m *Fraction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fraction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fraction.Merge(m, src)
}
func (m *Fraction) XXX_Size() int {
	return m.Size()
}
func (m *Fraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Fraction.DiscardUnknown(m)
}

var xxx_messageInfo_Fraction proto.InternalMessageInfo

func (m *Fraction) GetNumerator() uint64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *Fraction) GetDenominator() uint64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

type Fork struct {
	Version []byte    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Epoch   uint64    `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Spec    *ForkSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Fork) Reset()         { *m = Fork{} }
func (m *Fork) String() string { return proto.CompactTextString(m) }
func (*Fork) ProtoMessage()    {}
func (*Fork) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{3}
}
func (m *Fork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fork.Merge(m, src)
}
func (m *Fork) XXX_Size() int {
	return m.Size()
}
func (m *Fork) XXX_DiscardUnknown() {
	xxx_messageInfo_Fork.DiscardUnknown(m)
}

var xxx_messageInfo_Fork proto.InternalMessageInfo

func (m *Fork) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Fork) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Fork) GetSpec() *ForkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ForkSpec struct {
	FinalizedRootGindex               uint32 `protobuf:"varint,1,opt,name=finalized_root_gindex,json=finalizedRootGindex,proto3" json:"finalized_root_gindex,omitempty"`
	CurrentSyncCommitteeGindex        uint32 `protobuf:"varint,2,opt,name=current_sync_committee_gindex,json=currentSyncCommitteeGindex,proto3" json:"current_sync_committee_gindex,omitempty"`
	NextSyncCommitteeGindex           uint32 `protobuf:"varint,3,opt,name=next_sync_committee_gindex,json=nextSyncCommitteeGindex,proto3" json:"next_sync_committee_gindex,omitempty"`
	ExecutionPayloadGindex            uint32 `protobuf:"varint,4,opt,name=execution_payload_gindex,json=executionPayloadGindex,proto3" json:"execution_payload_gindex,omitempty"`
	ExecutionPayloadStateRootGindex   uint32 `protobuf:"varint,5,opt,name=execution_payload_state_root_gindex,json=executionPayloadStateRootGindex,proto3" json:"execution_payload_state_root_gindex,omitempty"`
	ExecutionPayloadBlockNumberGindex uint32 `protobuf:"varint,6,opt,name=execution_payload_block_number_gindex,json=executionPayloadBlockNumberGindex,proto3" json:"execution_payload_block_number_gindex,omitempty"`
}

func (m *ForkSpec) Reset()         { *m = ForkSpec{} }
func (m *ForkSpec) String() string { return proto.CompactTextString(m) }
func (*ForkSpec) ProtoMessage()    {}
func (*ForkSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{4}
}
func (m *ForkSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForkSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForkSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForkSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkSpec.Merge(m, src)
}
func (m *ForkSpec) XXX_Size() int {
	return m.Size()
}
func (m *ForkSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ForkSpec proto.InternalMessageInfo

func (m *ForkSpec) GetFinalizedRootGindex() uint32 {
	if m != nil {
		return m.FinalizedRootGindex
	}
	return 0
}

func (m *ForkSpec) GetCurrentSyncCommitteeGindex() uint32 {
	if m != nil {
		return m.CurrentSyncCommitteeGindex
	}
	return 0
}

func (m *ForkSpec) GetNextSyncCommitteeGindex() uint32 {
	if m != nil {
		return m.NextSyncCommitteeGindex
	}
	return 0
}

func (m *ForkSpec) GetExecutionPayloadGindex() uint32 {
	if m != nil {
		return m.ExecutionPayloadGindex
	}
	return 0
}

func (m *ForkSpec) GetExecutionPayloadStateRootGindex() uint32 {
	if m != nil {
		return m.ExecutionPayloadStateRootGindex
	}
	return 0
}

func (m *ForkSpec) GetExecutionPayloadBlockNumberGindex() uint32 {
	if m != nil {
		return m.ExecutionPayloadBlockNumberGindex
	}
	return 0
}

type ConsensusUpdate struct {
	AttestedHeader           *BeaconBlockHeader `protobuf:"bytes,1,opt,name=attested_header,json=attestedHeader,proto3" json:"attested_header,omitempty"`
	NextSyncCommittee        *SyncCommittee     `protobuf:"bytes,2,opt,name=next_sync_committee,json=nextSyncCommittee,proto3" json:"next_sync_committee,omitempty"`
	NextSyncCommitteeBranch  [][]byte           `protobuf:"bytes,3,rep,name=next_sync_committee_branch,json=nextSyncCommitteeBranch,proto3" json:"next_sync_committee_branch,omitempty"`
	FinalizedHeader          *BeaconBlockHeader `protobuf:"bytes,4,opt,name=finalized_header,json=finalizedHeader,proto3" json:"finalized_header,omitempty"`
	FinalizedHeaderBranch    [][]byte           `protobuf:"bytes,5,rep,name=finalized_header_branch,json=finalizedHeaderBranch,proto3" json:"finalized_header_branch,omitempty"`
	FinalizedExecutionRoot   []byte             `protobuf:"bytes,6,opt,name=finalized_execution_root,json=finalizedExecutionRoot,proto3" json:"finalized_execution_root,omitempty"`
	FinalizedExecutionBranch [][]byte           `protobuf:"bytes,7,rep,name=finalized_execution_branch,json=finalizedExecutionBranch,proto3" json:"finalized_execution_branch,omitempty"`
	SyncAggregate            *SyncAggregate     `protobuf:"bytes,8,opt,name=sync_aggregate,json=syncAggregate,proto3" json:"sync_aggregate,omitempty"`
	SignatureSlot            uint64             `protobuf:"varint,9,opt,name=signature_slot,json=signatureSlot,proto3" json:"signature_slot,omitempty"`
}

func (m *ConsensusUpdate) Reset()         { *m = ConsensusUpdate{} }
func (m *ConsensusUpdate) String() string { return proto.CompactTextString(m) }
func (*ConsensusUpdate) ProtoMessage()    {}
func (*ConsensusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{5}
}
func (m *ConsensusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusUpdate.Merge(m, src)
}
func (m *ConsensusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusUpdate proto.InternalMessageInfo

func (m *ConsensusUpdate) GetAttestedHeader() *BeaconBlockHeader {
	if m != nil {
		return m.AttestedHeader
	}
	return nil
}

func (m *ConsensusUpdate) GetNextSyncCommittee() *SyncCommittee {
	if m != nil {
		return m.NextSyncCommittee
	}
	return nil
}

func (m *ConsensusUpdate) GetNextSyncCommitteeBranch() [][]byte {
	if m != nil {
		return m.NextSyncCommitteeBranch
	}
	return nil
}

func (m *ConsensusUpdate) GetFinalizedHeader() *BeaconBlockHeader {
	if m != nil {
		return m.FinalizedHeader
	}
	return nil
}

func (m *ConsensusUpdate) GetFinalizedHeaderBranch() [][]byte {
	if m != nil {
		return m.FinalizedHeaderBranch
	}
	return nil
}

func (m *ConsensusUpdate) GetFinalizedExecutionRoot() []byte {
	if m != nil {
		return m.FinalizedExecutionRoot
	}
	return nil
}

func (m *ConsensusUpdate) GetFinalizedExecutionBranch() [][]byte {
	if m != nil {
		return m.FinalizedExecutionBranch
	}
	return nil
}

func (m *ConsensusUpdate) GetSyncAggregate() *SyncAggregate {
	if m != nil {
		return m.SyncAggregate
	}
	return nil
}

func (m *ConsensusUpdate) GetSignatureSlot() uint64 {
	if m != nil {
		return m.SignatureSlot
	}
	return 0
}

type SyncCommittee struct {
	Pubkeys         [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	AggregatePubkey []byte   `protobuf:"bytes,2,opt,name=aggregate_pubkey,json=aggregatePubkey,proto3" json:"aggregate_pubkey,omitempty"`
}

func (m *SyncCommittee) Reset()         { *m = SyncCommittee{} }
func (m *SyncCommittee) String() string { return proto.CompactTextString(m) }
func (*SyncCommittee) ProtoMessage()    {}
func (*SyncCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{6}
}
func (m *SyncCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommittee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommittee.Merge(m, src)
}
func (m *SyncCommittee) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommittee proto.InternalMessageInfo

func (m *SyncCommittee) GetPubkeys() [][]byte {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *SyncCommittee) GetAggregatePubkey() []byte {
	if m != nil {
		return m.AggregatePubkey
	}
	return nil
}

type SyncAggregate struct {
	SyncCommitteeBits      []byte `protobuf:"bytes,1,opt,name=sync_committee_bits,json=syncCommitteeBits,proto3" json:"sync_committee_bits,omitempty"`
	SyncCommitteeSignature []byte `protobuf:"bytes,2,opt,name=sync_committee_signature,json=syncCommitteeSignature,proto3" json:"sync_committee_signature,omitempty"`
}

func (m *SyncAggregate) Reset()         { *m = SyncAggregate{} }
func (m *SyncAggregate) String() string { return proto.CompactTextString(m) }
func (*SyncAggregate) ProtoMessage()    {}
func (*SyncAggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{7}
}
func (m *SyncAggregate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncAggregate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncAggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAggregate.Merge(m, src)
}
func (m *SyncAggregate) XXX_Size() int {
	return m.Size()
}
func (m *SyncAggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAggregate.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAggregate proto.InternalMessageInfo

func (m *SyncAggregate) GetSyncCommitteeBits() []byte {
	if m != nil {
		return m.SyncCommitteeBits
	}
	return nil
}

func (m *SyncAggregate) GetSyncCommitteeSignature() []byte {
	if m != nil {
		return m.SyncCommitteeSignature
	}
	return nil
}

type ExecutionUpdate struct {
	StateRoot         []byte   `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	StateRootBranch   [][]byte `protobuf:"bytes,2,rep,name=state_root_branch,json=stateRootBranch,proto3" json:"state_root_branch,omitempty"`
	BlockNumber       uint64   `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockNumberBranch [][]byte `protobuf:"bytes,4,rep,name=block_number_branch,json=blockNumberBranch,proto3" json:"block_number_branch,omitempty"`
	BlockHash         []byte   `protobuf:"bytes,5,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHashBranch   [][]byte `protobuf:"bytes,6,rep,name=block_hash_branch,json=blockHashBranch,proto3" json:"block_hash_branch,omitempty"`
}

func (m *ExecutionUpdate) Reset()         { *m = ExecutionUpdate{} }
func (m *ExecutionUpdate) String() string { return proto.CompactTextString(m) }
func (*ExecutionUpdate) ProtoMessage()    {}
func (*ExecutionUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{8}
}
func (m *ExecutionUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionUpdate.Merge(m, src)
}
func (m *ExecutionUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionUpdate proto.InternalMessageInfo

func (m *ExecutionUpdate) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ExecutionUpdate) GetStateRootBranch() [][]byte {
	if m != nil {
		return m.StateRootBranch
	}
	return nil
}

func (m *ExecutionUpdate) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ExecutionUpdate) GetBlockNumberBranch() [][]byte {
	if m != nil {
		return m.BlockNumberBranch
	}
	return nil
}

func (m *ExecutionUpdate) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ExecutionUpdate) GetBlockHashBranch() [][]byte {
	if m != nil {
		return m.BlockHashBranch
	}
	return nil
}

type BeaconBlockHeader struct {
	Slot          uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex uint64 `protobuf:"varint,2,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	ParentRoot    []byte `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	StateRoot     []byte `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	BodyRoot      []byte `protobuf:"bytes,5,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty"`
}

func (m *BeaconBlockHeader) Reset()         { *m = BeaconBlockHeader{} }
func (m *BeaconBlockHeader) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockHeader) ProtoMessage()    {}
func (*BeaconBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_375052802109acf0, []int{9}
}
func (m *BeaconBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockHeader.Merge(m, src)
}
func (m *BeaconBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockHeader proto.InternalMessageInfo

func (m *BeaconBlockHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlockHeader) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *BeaconBlockHeader) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*TrustedSyncCommittee)(nil), "ibc.lightclients.ethereum.v1.TrustedSyncCommittee")
	proto.RegisterType((*ForkParameters)(nil), "ibc.lightclients.ethereum.v1.ForkParameters")
	proto.RegisterType((*Fraction)(nil), "ibc.lightclients.ethereum.v1.Fraction")
	proto.RegisterType((*Fork)(nil), "ibc.lightclients.ethereum.v1.Fork")
	proto.RegisterType((*ForkSpec)(nil), "ibc.lightclients.ethereum.v1.ForkSpec")
	proto.RegisterType((*ConsensusUpdate)(nil), "ibc.lightclients.ethereum.v1.ConsensusUpdate")
	proto.RegisterType((*SyncCommittee)(nil), "ibc.lightclients.ethereum.v1.SyncCommittee")
	proto.RegisterType((*SyncAggregate)(nil), "ibc.lightclients.ethereum.v1.SyncAggregate")
	proto.RegisterType((*ExecutionUpdate)(nil), "ibc.lightclients.ethereum.v1.ExecutionUpdate")
	proto.RegisterType((*BeaconBlockHeader)(nil), "ibc.lightclients.ethereum.v1.BeaconBlockHeader")
}

func init() {
	proto.RegisterFile("ibc/lightclients/ethereum/v1/ethereum.proto", fileDescriptor_375052802109acf0)
}

var fileDescriptor_375052802109acf0 = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0xaf, 0xb3, 0xce, 0xbf, 0xb7, 0x9b, 0x6c, 0x33, 0x49, 0x13, 0x2b, 0x34, 0xdb, 0xad, 0x51,
	0x51, 0xa0, 0xca, 0x2e, 0x0d, 0x12, 0x8a, 0x00, 0x21, 0x35, 0x15, 0xa5, 0x20, 0x54, 0x45, 0x4e,
	0x41, 0x55, 0x39, 0x58, 0x63, 0xfb, 0x75, 0x3d, 0x8a, 0xed, 0xb1, 0x66, 0xc6, 0x51, 0x16, 0x71,
	0xe3, 0xca, 0x81, 0x23, 0xdf, 0x81, 0x2f, 0xc2, 0xb1, 0x47, 0x8e, 0x28, 0xf9, 0x16, 0x9c, 0x90,
	0xc7, 0x7f, 0x76, 0xbd, 0x9b, 0x06, 0xd4, 0xdb, 0xce, 0x7b, 0xef, 0xf7, 0x9b, 0x37, 0xef, 0xf7,
	0xde, 0xf3, 0xc2, 0x43, 0xe6, 0xf9, 0xc3, 0x88, 0x8d, 0x42, 0xe5, 0x47, 0x0c, 0x13, 0x25, 0x87,
	0xa8, 0x42, 0x14, 0x98, 0xc5, 0xc3, 0xf3, 0x47, 0xf5, 0xef, 0x41, 0x2a, 0xb8, 0xe2, 0xe4, 0x2e,
	0xf3, 0xfc, 0xc1, 0x74, 0xf0, 0xa0, 0x0e, 0x38, 0x7f, 0x64, 0xff, 0x62, 0xc0, 0xd6, 0x0b, 0x91,
	0x49, 0x85, 0xc1, 0xe9, 0x38, 0xf1, 0x9f, 0xf0, 0x38, 0x66, 0x4a, 0x21, 0x12, 0x07, 0xd6, 0xe5,
	0x38, 0xf1, 0x5d, 0xbf, 0xb2, 0x58, 0x0b, 0x7d, 0x63, 0xbf, 0x7d, 0xf8, 0x70, 0x70, 0x13, 0xdf,
	0xa0, 0x41, 0xe2, 0xac, 0xc9, 0x06, 0xe7, 0x0e, 0x2c, 0x33, 0xe9, 0x26, 0x78, 0xa1, 0xac, 0x56,
	0xdf, 0xd8, 0x5f, 0x71, 0x96, 0x98, 0x7c, 0x8e, 0x17, 0xca, 0xfe, 0x19, 0xd6, 0x9f, 0x72, 0x71,
	0x76, 0x42, 0x05, 0x8d, 0x51, 0xa1, 0x90, 0xe4, 0x63, 0xd8, 0x1a, 0x61, 0x82, 0x92, 0x49, 0xf7,
	0x35, 0x17, 0x67, 0xee, 0x39, 0x0a, 0xc9, 0x78, 0x62, 0x19, 0x7d, 0x63, 0xbf, 0xe3, 0x90, 0xd2,
	0x97, 0x83, 0x7e, 0x28, 0x3c, 0xe4, 0x08, 0x16, 0xf3, 0x48, 0x69, 0x2d, 0xf4, 0x5b, 0xfb, 0xed,
	0x43, 0xfb, 0xe6, 0x3c, 0x73, 0xa4, 0x53, 0x00, 0xec, 0x6f, 0x61, 0xe5, 0xa9, 0xa0, 0xbe, 0xca,
	0x59, 0xee, 0xc2, 0x6a, 0x92, 0xc5, 0x28, 0xa8, 0xe2, 0x42, 0x5f, 0x66, 0x3a, 0x13, 0x03, 0xe9,
	0x43, 0x3b, 0xc0, 0x84, 0xc7, 0x2c, 0xd1, 0xfe, 0x05, 0xed, 0x9f, 0x36, 0xd9, 0x02, 0xcc, 0x9c,
	0x9a, 0x58, 0xb0, 0xdc, 0x4c, 0xb9, 0x3a, 0x92, 0x2d, 0x58, 0xc4, 0x94, 0xfb, 0x61, 0x89, 0x2e,
	0x0e, 0xe4, 0x33, 0x30, 0x65, 0x8a, 0xbe, 0xae, 0x4b, 0xfb, 0xf0, 0x83, 0xff, 0x4e, 0xfe, 0x34,
	0x45, 0xdf, 0xd1, 0x18, 0xfb, 0xf7, 0x16, 0xac, 0x54, 0x26, 0x72, 0x08, 0x77, 0x5e, 0xb3, 0x84,
	0x46, 0xec, 0x27, 0x0c, 0x5c, 0xc1, 0xb9, 0x72, 0x47, 0x2c, 0x09, 0xf0, 0x42, 0xa7, 0xb1, 0xe6,
	0x6c, 0xd6, 0x4e, 0x87, 0x73, 0xf5, 0xb5, 0x76, 0x91, 0xc7, 0xb0, 0xe7, 0x67, 0x42, 0x60, 0xa2,
	0xdc, 0xa6, 0xe6, 0x15, 0x76, 0x41, 0x63, 0x77, 0xcb, 0xa0, 0x86, 0xc6, 0x25, 0xc5, 0xe7, 0xb0,
	0x9b, 0xeb, 0xfa, 0x16, 0x7c, 0x4b, 0xe3, 0x77, 0xf2, 0x88, 0xeb, 0xc0, 0x47, 0x60, 0xe1, 0x05,
	0xfa, 0x59, 0xae, 0x80, 0x9b, 0xd2, 0x71, 0xc4, 0x69, 0x50, 0x41, 0x4d, 0x0d, 0xdd, 0xae, 0xfd,
	0x27, 0x85, 0xbb, 0x44, 0x7e, 0x07, 0xef, 0xcf, 0x23, 0xa5, 0xa2, 0x0a, 0x1b, 0x6f, 0x5f, 0xd4,
	0x24, 0xf7, 0x66, 0x49, 0x4e, 0xf3, 0xc0, 0xa9, 0x3a, 0x9c, 0xc0, 0x83, 0x79, 0x36, 0x2f, 0xe2,
	0xfe, 0x99, 0x9b, 0x64, 0xb1, 0x87, 0xa2, 0xe2, 0x5b, 0xd2, 0x7c, 0xf7, 0x67, 0xf9, 0x8e, 0xf3,
	0xd0, 0xe7, 0x3a, 0xb2, 0x60, 0xb4, 0x7f, 0x5d, 0x84, 0xee, 0x13, 0x9e, 0x48, 0x4c, 0x64, 0x26,
	0xbf, 0x4f, 0x03, 0xaa, 0x90, 0xbc, 0x84, 0x2e, 0x55, 0x0a, 0xf3, 0x91, 0x73, 0x43, 0xa4, 0x01,
	0x16, 0x8d, 0xd6, 0x3e, 0x1c, 0xde, 0xac, 0xfa, 0x31, 0x52, 0x9f, 0x27, 0xfa, 0x8e, 0x67, 0x1a,
	0xe6, 0xac, 0x57, 0x3c, 0xc5, 0x99, 0xfc, 0x08, 0x9b, 0xd7, 0x88, 0xf0, 0x2e, 0x83, 0xbb, 0x31,
	0x27, 0xd5, 0xdb, 0x14, 0xf6, 0x04, 0x4d, 0xfc, 0xd0, 0x6a, 0xf5, 0x5b, 0xfb, 0x9d, 0x6b, 0x14,
	0x3e, 0xd6, 0x6e, 0xf2, 0x0a, 0x6e, 0x4f, 0xba, 0xb2, 0x7c, 0xb4, 0xf9, 0x6e, 0x8f, 0xee, 0xd6,
	0x44, 0xe5, 0xab, 0x3f, 0x85, 0x9d, 0x59, 0xee, 0x2a, 0xab, 0x45, 0x9d, 0xd5, 0x9d, 0x19, 0x44,
	0x99, 0xd3, 0x11, 0x58, 0x13, 0xdc, 0x44, 0xf7, 0xbc, 0x6f, 0xb4, 0xc0, 0x1d, 0x67, 0xbb, 0xf6,
	0x7f, 0x55, 0xb9, 0xf3, 0x6e, 0x21, 0x5f, 0xc0, 0xee, 0x75, 0xc8, 0xf2, 0xd2, 0x65, 0x7d, 0xa9,
	0x35, 0x8f, 0x2d, 0xef, 0xad, 0x36, 0x2b, 0x1d, 0x8d, 0x04, 0x8e, 0xa8, 0x42, 0x6b, 0xe5, 0xff,
	0x0a, 0xf4, 0xb8, 0x82, 0x14, 0x9b, 0xb5, 0x3e, 0x92, 0x07, 0xb0, 0x2e, 0xd9, 0x28, 0xa1, 0x2a,
	0x13, 0xe8, 0xca, 0x88, 0x2b, 0x6b, 0x55, 0x6f, 0x97, 0xb5, 0xda, 0x7a, 0x1a, 0x71, 0x65, 0xbf,
	0x80, 0xb5, 0xa6, 0xa8, 0x16, 0x2c, 0xa7, 0x99, 0x77, 0x86, 0x63, 0x69, 0x19, 0x3a, 0xed, 0xea,
	0x48, 0x3e, 0x84, 0xdb, 0x75, 0x82, 0x6e, 0x61, 0xd4, 0x8d, 0xd4, 0x71, 0xba, 0xb5, 0xfd, 0x44,
	0x9b, 0xed, 0x71, 0xc1, 0x3a, 0xc9, 0x66, 0x00, 0x9b, 0xb3, 0x5d, 0xc2, 0x94, 0x2c, 0x17, 0xe1,
	0x46, 0xe3, 0x9b, 0x70, 0xcc, 0x94, 0xcc, 0x95, 0x98, 0x89, 0xaf, 0xd3, 0x2e, 0xef, 0xdc, 0x6e,
	0x80, 0x4e, 0x2b, 0xaf, 0xfd, 0x8f, 0x01, 0xdd, 0xba, 0xbe, 0xe5, 0x7c, 0xed, 0x01, 0x4c, 0x36,
	0x40, 0x79, 0xe9, 0xaa, 0xac, 0x46, 0x9d, 0x7c, 0x04, 0x1b, 0x53, 0x0b, 0xa2, 0xd4, 0x6c, 0x41,
	0x3f, 0xbe, 0x5b, 0x47, 0x95, 0x52, 0xdd, 0x87, 0xce, 0xf4, 0xf8, 0xeb, 0x3d, 0x66, 0x3a, 0x6d,
	0x6f, 0x32, 0xe7, 0xf9, 0x5b, 0x1b, 0x1b, 0xa2, 0x24, 0x34, 0x35, 0xe1, 0xc6, 0x54, 0x64, 0x49,
	0xb9, 0x07, 0x50, 0xc4, 0x87, 0x54, 0x86, 0x7a, 0x31, 0x75, 0x9c, 0x55, 0x6d, 0x79, 0x46, 0x65,
	0x98, 0x67, 0x37, 0x71, 0x57, 0x64, 0x4b, 0x45, 0x76, 0x75, 0x54, 0x41, 0x65, 0xff, 0x61, 0xc0,
	0xc6, 0xdc, 0x7c, 0x10, 0x02, 0xa6, 0x6e, 0x80, 0xe2, 0xe3, 0xa5, 0x7f, 0xe7, 0xed, 0x91, 0x0a,
	0x9e, 0x72, 0x89, 0xc2, 0x9d, 0x6c, 0x74, 0xd3, 0x59, 0xab, 0xac, 0xdf, 0xe8, 0xfd, 0x77, 0x0f,
	0xda, 0x29, 0xd5, 0x9f, 0x01, 0x5d, 0xba, 0x96, 0x4e, 0x0e, 0x0a, 0x93, 0xae, 0x5d, 0xb3, 0xb4,
	0xe6, 0x6c, 0x69, 0xdf, 0x83, 0x55, 0x8f, 0x07, 0xe3, 0xc2, 0x5b, 0x3c, 0x6d, 0x25, 0x37, 0xe8,
	0x8a, 0xbe, 0xfc, 0xf3, 0xb2, 0x67, 0xbc, 0xb9, 0xec, 0x19, 0x7f, 0x5f, 0xf6, 0x8c, 0xdf, 0xae,
	0x7a, 0xb7, 0xde, 0x5c, 0xf5, 0x6e, 0xfd, 0x75, 0xd5, 0xbb, 0xf5, 0xea, 0xcb, 0x11, 0x53, 0x61,
	0xe6, 0x0d, 0x7c, 0x1e, 0x0f, 0x03, 0xaa, 0xa8, 0x1f, 0x52, 0x96, 0x44, 0xd4, 0x1b, 0xf2, 0x54,
	0xb1, 0x98, 0xc9, 0xf8, 0x80, 0x79, 0xfe, 0x81, 0xc0, 0x88, 0x8e, 0x0f, 0x52, 0xc1, 0xcf, 0x51,
	0x0c, 0x63, 0x1e, 0x64, 0x11, 0x0e, 0xd5, 0x38, 0x45, 0xe9, 0x2d, 0xe9, 0x3f, 0x3a, 0x9f, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x89, 0x5c, 0xed, 0x27, 0x17, 0x09, 0x00, 0x00,
}

func (m *TrustedSyncCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustedSyncCommittee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustedSyncCommittee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNext {
		i--
		if m.IsNext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SyncCommittee != nil {
		{
			size, err := m.SyncCommittee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ForkParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForkParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForkParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forks) > 0 {
		for iNdEx := len(m.Forks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GenesisForkVersion) > 0 {
		i -= len(m.GenesisForkVersion)
		copy(dAtA[i:], m.GenesisForkVersion)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.GenesisForkVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fraction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fraction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denominator != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.Denominator))
		i--
		dAtA[i] = 0x10
	}
	if m.Numerator != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.Numerator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Fork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForkSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForkSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionPayloadBlockNumberGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.ExecutionPayloadBlockNumberGindex))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecutionPayloadStateRootGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.ExecutionPayloadStateRootGindex))
		i--
		dAtA[i] = 0x28
	}
	if m.ExecutionPayloadGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.ExecutionPayloadGindex))
		i--
		dAtA[i] = 0x20
	}
	if m.NextSyncCommitteeGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.NextSyncCommitteeGindex))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentSyncCommitteeGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.CurrentSyncCommitteeGindex))
		i--
		dAtA[i] = 0x10
	}
	if m.FinalizedRootGindex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.FinalizedRootGindex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureSlot != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.SignatureSlot))
		i--
		dAtA[i] = 0x48
	}
	if m.SyncAggregate != nil {
		{
			size, err := m.SyncAggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.FinalizedExecutionBranch) > 0 {
		for iNdEx := len(m.FinalizedExecutionBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FinalizedExecutionBranch[iNdEx])
			copy(dAtA[i:], m.FinalizedExecutionBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.FinalizedExecutionBranch[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FinalizedExecutionRoot) > 0 {
		i -= len(m.FinalizedExecutionRoot)
		copy(dAtA[i:], m.FinalizedExecutionRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.FinalizedExecutionRoot)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinalizedHeaderBranch) > 0 {
		for iNdEx := len(m.FinalizedHeaderBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FinalizedHeaderBranch[iNdEx])
			copy(dAtA[i:], m.FinalizedHeaderBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.FinalizedHeaderBranch[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.FinalizedHeader != nil {
		{
			size, err := m.FinalizedHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextSyncCommitteeBranch) > 0 {
		for iNdEx := len(m.NextSyncCommitteeBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NextSyncCommitteeBranch[iNdEx])
			copy(dAtA[i:], m.NextSyncCommitteeBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.NextSyncCommitteeBranch[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextSyncCommittee != nil {
		{
			size, err := m.NextSyncCommittee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AttestedHeader != nil {
		{
			size, err := m.AttestedHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommittee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommittee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregatePubkey) > 0 {
		i -= len(m.AggregatePubkey)
		copy(dAtA[i:], m.AggregatePubkey)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.AggregatePubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pubkeys) > 0 {
		for iNdEx := len(m.Pubkeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pubkeys[iNdEx])
			copy(dAtA[i:], m.Pubkeys[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.Pubkeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncAggregate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyncCommitteeSignature) > 0 {
		i -= len(m.SyncCommitteeSignature)
		copy(dAtA[i:], m.SyncCommitteeSignature)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.SyncCommitteeSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SyncCommitteeBits) > 0 {
		i -= len(m.SyncCommitteeBits)
		copy(dAtA[i:], m.SyncCommitteeBits)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.SyncCommitteeBits)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHashBranch) > 0 {
		for iNdEx := len(m.BlockHashBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockHashBranch[iNdEx])
			copy(dAtA[i:], m.BlockHashBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.BlockHashBranch[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlockNumberBranch) > 0 {
		for iNdEx := len(m.BlockNumberBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockNumberBranch[iNdEx])
			copy(dAtA[i:], m.BlockNumberBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.BlockNumberBranch[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BlockNumber != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StateRootBranch) > 0 {
		for iNdEx := len(m.StateRootBranch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StateRootBranch[iNdEx])
			copy(dAtA[i:], m.StateRootBranch[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.StateRootBranch[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BodyRoot) > 0 {
		i -= len(m.BodyRoot)
		copy(dAtA[i:], m.BodyRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.BodyRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentRoot) > 0 {
		i -= len(m.ParentRoot)
		copy(dAtA[i:], m.ParentRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.ParentRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthereum(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthereum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrustedSyncCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncCommittee != nil {
		l = m.SyncCommittee.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.IsNext {
		n += 2
	}
	return n
}

func (m *ForkParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisForkVersion)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.Forks) > 0 {
		for _, e := range m.Forks {
			l = e.Size()
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	return n
}

func (m *Fraction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 1 + sovEthereum(uint64(m.Numerator))
	}
	if m.Denominator != 0 {
		n += 1 + sovEthereum(uint64(m.Denominator))
	}
	return n
}

func (m *Fork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovEthereum(uint64(m.Epoch))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *ForkSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizedRootGindex != 0 {
		n += 1 + sovEthereum(uint64(m.FinalizedRootGindex))
	}
	if m.CurrentSyncCommitteeGindex != 0 {
		n += 1 + sovEthereum(uint64(m.CurrentSyncCommitteeGindex))
	}
	if m.NextSyncCommitteeGindex != 0 {
		n += 1 + sovEthereum(uint64(m.NextSyncCommitteeGindex))
	}
	if m.ExecutionPayloadGindex != 0 {
		n += 1 + sovEthereum(uint64(m.ExecutionPayloadGindex))
	}
	if m.ExecutionPayloadStateRootGindex != 0 {
		n += 1 + sovEthereum(uint64(m.ExecutionPayloadStateRootGindex))
	}
	if m.ExecutionPayloadBlockNumberGindex != 0 {
		n += 1 + sovEthereum(uint64(m.ExecutionPayloadBlockNumberGindex))
	}
	return n
}

func (m *ConsensusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestedHeader != nil {
		l = m.AttestedHeader.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.NextSyncCommittee != nil {
		l = m.NextSyncCommittee.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.NextSyncCommitteeBranch) > 0 {
		for _, b := range m.NextSyncCommitteeBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if m.FinalizedHeader != nil {
		l = m.FinalizedHeader.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.FinalizedHeaderBranch) > 0 {
		for _, b := range m.FinalizedHeaderBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	l = len(m.FinalizedExecutionRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.FinalizedExecutionBranch) > 0 {
		for _, b := range m.FinalizedExecutionBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if m.SyncAggregate != nil {
		l = m.SyncAggregate.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.SignatureSlot != 0 {
		n += 1 + sovEthereum(uint64(m.SignatureSlot))
	}
	return n
}

func (m *SyncCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for _, b := range m.Pubkeys {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	l = len(m.AggregatePubkey)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *SyncAggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SyncCommitteeBits)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.SyncCommitteeSignature)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *ExecutionUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.StateRootBranch) > 0 {
		for _, b := range m.StateRootBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if m.BlockNumber != 0 {
		n += 1 + sovEthereum(uint64(m.BlockNumber))
	}
	if len(m.BlockNumberBranch) > 0 {
		for _, b := range m.BlockNumberBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.BlockHashBranch) > 0 {
		for _, b := range m.BlockHashBranch {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	return n
}

func (m *BeaconBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovEthereum(uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovEthereum(uint64(m.ProposerIndex))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func sovEthereum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthereum(x uint64) (n int) {
	return sovEthereum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrustedSyncCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustedSyncCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustedSyncCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncCommittee == nil {
				m.SyncCommittee = &SyncCommittee{}
			}
			if err := m.SyncCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNext = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForkParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForkParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForkParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisForkVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisForkVersion = append(m.GenesisForkVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisForkVersion == nil {
				m.GenesisForkVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forks = append(m.Forks, &Fork{})
			if err := m.Forks[len(m.Forks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ForkSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedRootGindex", wireType)
			}
			m.FinalizedRootGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedRootGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSyncCommitteeGindex", wireType)
			}
			m.CurrentSyncCommitteeGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSyncCommitteeGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSyncCommitteeGindex", wireType)
			}
			m.NextSyncCommitteeGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSyncCommitteeGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayloadGindex", wireType)
			}
			m.ExecutionPayloadGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionPayloadGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayloadStateRootGindex", wireType)
			}
			m.ExecutionPayloadStateRootGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionPayloadStateRootGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayloadBlockNumberGindex", wireType)
			}
			m.ExecutionPayloadBlockNumberGindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionPayloadBlockNumberGindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttestedHeader == nil {
				m.AttestedHeader = &BeaconBlockHeader{}
			}
			if err := m.AttestedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSyncCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextSyncCommittee == nil {
				m.NextSyncCommittee = &SyncCommittee{}
			}
			if err := m.NextSyncCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSyncCommitteeBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSyncCommitteeBranch = append(m.NextSyncCommitteeBranch, make([]byte, postIndex-iNdEx))
			copy(m.NextSyncCommitteeBranch[len(m.NextSyncCommitteeBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedHeader == nil {
				m.FinalizedHeader = &BeaconBlockHeader{}
			}
			if err := m.FinalizedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeaderBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedHeaderBranch = append(m.FinalizedHeaderBranch, make([]byte, postIndex-iNdEx))
			copy(m.FinalizedHeaderBranch[len(m.FinalizedHeaderBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedExecutionRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedExecutionRoot = append(m.FinalizedExecutionRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedExecutionRoot == nil {
				m.FinalizedExecutionRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedExecutionBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedExecutionBranch = append(m.FinalizedExecutionBranch, make([]byte, postIndex-iNdEx))
			copy(m.FinalizedExecutionBranch[len(m.FinalizedExecutionBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncAggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncAggregate == nil {
				m.SyncAggregate = &SyncAggregate{}
			}
			if err := m.SyncAggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureSlot", wireType)
			}
			m.SignatureSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkeys = append(m.Pubkeys, make([]byte, postIndex-iNdEx))
			copy(m.Pubkeys[len(m.Pubkeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatePubkey = append(m.AggregatePubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatePubkey == nil {
				m.AggregatePubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAggregate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAggregate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAggregate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommitteeBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncCommitteeBits = append(m.SyncCommitteeBits[:0], dAtA[iNdEx:postIndex]...)
			if m.SyncCommitteeBits == nil {
				m.SyncCommitteeBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommitteeSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncCommitteeSignature = append(m.SyncCommitteeSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SyncCommitteeSignature == nil {
				m.SyncCommitteeSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootBranch = append(m.StateRootBranch, make([]byte, postIndex-iNdEx))
			copy(m.StateRootBranch[len(m.StateRootBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumberBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumberBranch = append(m.BlockNumberBranch, make([]byte, postIndex-iNdEx))
			copy(m.BlockNumberBranch[len(m.BlockNumberBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHashBranch = append(m.BlockHashBranch, make([]byte, postIndex-iNdEx))
			copy(m.BlockHashBranch[len(m.BlockHashBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthereum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthereum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthereum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthereum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthereum = fmt.Errorf("proto: unexpected end of group")
)

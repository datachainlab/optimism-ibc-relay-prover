// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/optimism/v1/optimism.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type L1Config struct {
	GenesisValidatorsRoot        []byte          `protobuf:"bytes,1,opt,name=genesis_validators_root,json=genesisValidatorsRoot,proto3" json:"genesis_validators_root,omitempty"`
	MinSyncCommitteeParticipants uint64          `protobuf:"varint,2,opt,name=min_sync_committee_participants,json=minSyncCommitteeParticipants,proto3" json:"min_sync_committee_participants,omitempty"`
	GenesisTime                  uint64          `protobuf:"varint,3,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	ForkParameters               *ForkParameters `protobuf:"bytes,4,opt,name=fork_parameters,json=forkParameters,proto3" json:"fork_parameters,omitempty"`
	SecondsPerSlot               uint64          `protobuf:"varint,5,opt,name=seconds_per_slot,json=secondsPerSlot,proto3" json:"seconds_per_slot,omitempty"`
	SlotsPerEpoch                uint64          `protobuf:"varint,6,opt,name=slots_per_epoch,json=slotsPerEpoch,proto3" json:"slots_per_epoch,omitempty"`
	EpochsPerSyncCommitteePeriod uint64          `protobuf:"varint,7,opt,name=epochs_per_sync_committee_period,json=epochsPerSyncCommitteePeriod,proto3" json:"epochs_per_sync_committee_period,omitempty"`
	TrustLevel                   *Fraction       `protobuf:"bytes,8,opt,name=trust_level,json=trustLevel,proto3" json:"trust_level,omitempty"`
	TrustingPeriod               time.Duration   `protobuf:"bytes,9,opt,name=trusting_period,json=trustingPeriod,proto3,stdduration" json:"trusting_period"`
	MaxClockDrift                time.Duration   `protobuf:"bytes,10,opt,name=max_clock_drift,json=maxClockDrift,proto3,stdduration" json:"max_clock_drift"`
}

func (m *L1Config) Reset()         { *m = L1Config{} }
func (m *L1Config) String() string { return proto.CompactTextString(m) }
func (*L1Config) ProtoMessage()    {}
func (*L1Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{0}
}
func (m *L1Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L1Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L1Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L1Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L1Config.Merge(m, src)
}
func (m *L1Config) XXX_Size() int {
	return m.Size()
}
func (m *L1Config) XXX_DiscardUnknown() {
	xxx_messageInfo_L1Config.DiscardUnknown(m)
}

var xxx_messageInfo_L1Config proto.InternalMessageInfo

type FaultDisputeGameConfig struct {
	DisputeGameFactoryAddress           []byte `protobuf:"bytes,1,opt,name=dispute_game_factory_address,json=disputeGameFactoryAddress,proto3" json:"dispute_game_factory_address,omitempty"`
	DisputeGameFactoryTargetStorageSlot uint32 `protobuf:"varint,2,opt,name=dispute_game_factory_target_storage_slot,json=disputeGameFactoryTargetStorageSlot,proto3" json:"dispute_game_factory_target_storage_slot,omitempty"`
	FaultDisputeGameStatusSlot          uint32 `protobuf:"varint,3,opt,name=fault_dispute_game_status_slot,json=faultDisputeGameStatusSlot,proto3" json:"fault_dispute_game_status_slot,omitempty"`
	FaultDisputeGameStatusSlotOffset    uint32 `protobuf:"varint,4,opt,name=fault_dispute_game_status_slot_offset,json=faultDisputeGameStatusSlotOffset,proto3" json:"fault_dispute_game_status_slot_offset,omitempty"`
	FaultDisputeGameCreatedAtSlotOffset uint32 `protobuf:"varint,5,opt,name=fault_dispute_game_created_at_slot_offset,json=faultDisputeGameCreatedAtSlotOffset,proto3" json:"fault_dispute_game_created_at_slot_offset,omitempty"`
	StatusDefenderWin                   uint32 `protobuf:"varint,6,opt,name=status_defender_win,json=statusDefenderWin,proto3" json:"status_defender_win,omitempty"`
}

func (m *FaultDisputeGameConfig) Reset()         { *m = FaultDisputeGameConfig{} }
func (m *FaultDisputeGameConfig) String() string { return proto.CompactTextString(m) }
func (*FaultDisputeGameConfig) ProtoMessage()    {}
func (*FaultDisputeGameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{1}
}
func (m *FaultDisputeGameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaultDisputeGameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaultDisputeGameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaultDisputeGameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultDisputeGameConfig.Merge(m, src)
}
func (m *FaultDisputeGameConfig) XXX_Size() int {
	return m.Size()
}
func (m *FaultDisputeGameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultDisputeGameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FaultDisputeGameConfig proto.InternalMessageInfo

type ClientState struct {
	ChainId                uint64                  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IbcStoreAddress        []byte                  `protobuf:"bytes,2,opt,name=ibc_store_address,json=ibcStoreAddress,proto3" json:"ibc_store_address,omitempty"`
	IbcCommitmentsSlot     []byte                  `protobuf:"bytes,3,opt,name=ibc_commitments_slot,json=ibcCommitmentsSlot,proto3" json:"ibc_commitments_slot,omitempty"`
	LatestHeight           *types.Height           `protobuf:"bytes,4,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	Frozen                 bool                    `protobuf:"varint,5,opt,name=frozen,proto3" json:"frozen,omitempty"`
	RollupConfigJson       []byte                  `protobuf:"bytes,6,opt,name=rollup_config_json,json=rollupConfigJson,proto3" json:"rollup_config_json,omitempty"`
	L1Config               *L1Config               `protobuf:"bytes,7,opt,name=l1_config,json=l1Config,proto3" json:"l1_config,omitempty"`
	FaultDisputeGameConfig *FaultDisputeGameConfig `protobuf:"bytes,8,opt,name=fault_dispute_game_config,json=faultDisputeGameConfig,proto3" json:"fault_dispute_game_config,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{2}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type L1Header struct {
	TrustedSyncCommittee *TrustedSyncCommittee `protobuf:"bytes,1,opt,name=trusted_sync_committee,json=trustedSyncCommittee,proto3" json:"trusted_sync_committee,omitempty"`
	ConsensusUpdate      *ConsensusUpdate      `protobuf:"bytes,2,opt,name=consensus_update,json=consensusUpdate,proto3" json:"consensus_update,omitempty"`
	ExecutionUpdate      *ExecutionUpdate      `protobuf:"bytes,3,opt,name=execution_update,json=executionUpdate,proto3" json:"execution_update,omitempty"`
	Timestamp            uint64                `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *L1Header) Reset()         { *m = L1Header{} }
func (m *L1Header) String() string { return proto.CompactTextString(m) }
func (*L1Header) ProtoMessage()    {}
func (*L1Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{3}
}
func (m *L1Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L1Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L1Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L1Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L1Header.Merge(m, src)
}
func (m *L1Header) XXX_Size() int {
	return m.Size()
}
func (m *L1Header) XXX_DiscardUnknown() {
	xxx_messageInfo_L1Header.DiscardUnknown(m)
}

var xxx_messageInfo_L1Header proto.InternalMessageInfo

type Derivation struct {
	AgreedL2OutputRoot []byte `protobuf:"bytes,1,opt,name=agreed_l2_output_root,json=agreedL2OutputRoot,proto3" json:"agreed_l2_output_root,omitempty"`
	L2OutputRoot       []byte `protobuf:"bytes,2,opt,name=l2_output_root,json=l2OutputRoot,proto3" json:"l2_output_root,omitempty"`
	L2BlockNumber      uint64 `protobuf:"varint,3,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *Derivation) Reset()         { *m = Derivation{} }
func (m *Derivation) String() string { return proto.CompactTextString(m) }
func (*Derivation) ProtoMessage()    {}
func (*Derivation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{4}
}
func (m *Derivation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Derivation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Derivation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Derivation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Derivation.Merge(m, src)
}
func (m *Derivation) XXX_Size() int {
	return m.Size()
}
func (m *Derivation) XXX_DiscardUnknown() {
	xxx_messageInfo_Derivation.DiscardUnknown(m)
}

var xxx_messageInfo_Derivation proto.InternalMessageInfo

type Header struct {
	TrustedHeight          *types.Height  `protobuf:"bytes,1,opt,name=trusted_height,json=trustedHeight,proto3" json:"trusted_height,omitempty"`
	AccountUpdate          *AccountUpdate `protobuf:"bytes,2,opt,name=account_update,json=accountUpdate,proto3" json:"account_update,omitempty"`
	Derivation             *Derivation    `protobuf:"bytes,3,opt,name=derivation,proto3" json:"derivation,omitempty"`
	Preimages              []byte         `protobuf:"bytes,4,opt,name=preimages,proto3" json:"preimages,omitempty"`
	TrustedToDeterministic []*L1Header    `protobuf:"bytes,5,rep,name=trusted_to_deterministic,json=trustedToDeterministic,proto3" json:"trusted_to_deterministic,omitempty"`
	DeterministicToLatest  []*L1Header    `protobuf:"bytes,6,rep,name=deterministic_to_latest,json=deterministicToLatest,proto3" json:"deterministic_to_latest,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{5}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type ConsensusState struct {
	StorageRoot            []byte `protobuf:"bytes,1,opt,name=storage_root,json=storageRoot,proto3" json:"storage_root,omitempty"`
	Timestamp              uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OutputRoot             []byte `protobuf:"bytes,3,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty"`
	L1Slot                 uint64 `protobuf:"varint,4,opt,name=l1_slot,json=l1Slot,proto3" json:"l1_slot,omitempty"`
	L1CurrentSyncCommittee []byte `protobuf:"bytes,5,opt,name=l1_current_sync_committee,json=l1CurrentSyncCommittee,proto3" json:"l1_current_sync_committee,omitempty"`
	L1NextSyncCommittee    []byte `protobuf:"bytes,6,opt,name=l1_next_sync_committee,json=l1NextSyncCommittee,proto3" json:"l1_next_sync_committee,omitempty"`
	L1Timestamp            uint64 `protobuf:"varint,7,opt,name=l1_timestamp,json=l1Timestamp,proto3" json:"l1_timestamp,omitempty"`
	L1Origin               uint64 `protobuf:"varint,8,opt,name=l1_origin,json=l1Origin,proto3" json:"l1_origin,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{6}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

type AccountUpdate struct {
	AccountProof       []byte `protobuf:"bytes,1,opt,name=account_proof,json=accountProof,proto3" json:"account_proof,omitempty"`
	AccountStorageRoot []byte `protobuf:"bytes,2,opt,name=account_storage_root,json=accountStorageRoot,proto3" json:"account_storage_root,omitempty"`
}

func (m *AccountUpdate) Reset()         { *m = AccountUpdate{} }
func (m *AccountUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate) ProtoMessage()    {}
func (*AccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{7}
}
func (m *AccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate.Merge(m, src)
}
func (m *AccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate proto.InternalMessageInfo

type FaultDisputeGameFactoryProof struct {
	StateRoot                      []byte         `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	DisputeGameFactoryAccount      *AccountUpdate `protobuf:"bytes,3,opt,name=dispute_game_factory_account,json=disputeGameFactoryAccount,proto3" json:"dispute_game_factory_account,omitempty"`
	DisputeGameFactoryStorageProof []byte         `protobuf:"bytes,4,opt,name=dispute_game_factory_storage_proof,json=disputeGameFactoryStorageProof,proto3" json:"dispute_game_factory_storage_proof,omitempty"`
	FaultDisputeGameAccount        *AccountUpdate `protobuf:"bytes,5,opt,name=fault_dispute_game_account,json=faultDisputeGameAccount,proto3" json:"fault_dispute_game_account,omitempty"`
	FaultDisputeGameStorageProof   []byte         `protobuf:"bytes,6,opt,name=fault_dispute_game_storage_proof,json=faultDisputeGameStorageProof,proto3" json:"fault_dispute_game_storage_proof,omitempty"`
	FaultDisputeGameSourceGameType uint64         `protobuf:"varint,7,opt,name=fault_dispute_game_source_game_type,json=faultDisputeGameSourceGameType,proto3" json:"fault_dispute_game_source_game_type,omitempty"`
}

func (m *FaultDisputeGameFactoryProof) Reset()         { *m = FaultDisputeGameFactoryProof{} }
func (m *FaultDisputeGameFactoryProof) String() string { return proto.CompactTextString(m) }
func (*FaultDisputeGameFactoryProof) ProtoMessage()    {}
func (*FaultDisputeGameFactoryProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{8}
}
func (m *FaultDisputeGameFactoryProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaultDisputeGameFactoryProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaultDisputeGameFactoryProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaultDisputeGameFactoryProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultDisputeGameFactoryProof.Merge(m, src)
}
func (m *FaultDisputeGameFactoryProof) XXX_Size() int {
	return m.Size()
}
func (m *FaultDisputeGameFactoryProof) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultDisputeGameFactoryProof.DiscardUnknown(m)
}

var xxx_messageInfo_FaultDisputeGameFactoryProof proto.InternalMessageInfo

type Misbehaviour struct {
	ClientId                     string                        `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TrustedHeight                *types.Height                 `protobuf:"bytes,2,opt,name=trusted_height,json=trustedHeight,proto3" json:"trusted_height,omitempty"`
	ResolvedL2Number             uint64                        `protobuf:"varint,3,opt,name=resolved_l2_number,json=resolvedL2Number,proto3" json:"resolved_l2_number,omitempty"`
	ResolvedOutputRoot           []byte                        `protobuf:"bytes,4,opt,name=resolved_output_root,json=resolvedOutputRoot,proto3" json:"resolved_output_root,omitempty"`
	FaultDisputeGameFactoryProof *FaultDisputeGameFactoryProof `protobuf:"bytes,5,opt,name=fault_dispute_game_factory_proof,json=faultDisputeGameFactoryProof,proto3" json:"fault_dispute_game_factory_proof,omitempty"`
	LatestL1Header               *L1Header                     `protobuf:"bytes,6,opt,name=latest_l1_header,json=latestL1Header,proto3" json:"latest_l1_header,omitempty"`
	// Only for past game
	FirstL2ToL1MessagePasserAccount *AccountUpdate `protobuf:"bytes,7,opt,name=first_l2_to_l1_message_passer_account,json=firstL2ToL1MessagePasserAccount,proto3" json:"first_l2_to_l1_message_passer_account,omitempty"`
	LastL2ToL1MessagePasserAccount  *AccountUpdate `protobuf:"bytes,8,opt,name=last_l2_to_l1_message_passer_account,json=lastL2ToL1MessagePasserAccount,proto3" json:"last_l2_to_l1_message_passer_account,omitempty"`
	L2HeaderHistory                 [][]byte       `protobuf:"bytes,9,rep,name=l2_header_history,json=l2HeaderHistory,proto3" json:"l2_header_history,omitempty"`
	// Only for future game
	// L1 block which the resolved FaultDisputeGameFactory.create(gameType, output, l2_num) is called at
	SubmittedL1Proof *FaultDisputeGameFactoryProof `protobuf:"bytes,10,opt,name=submitted_l1_proof,json=submittedL1Proof,proto3" json:"submitted_l1_proof,omitempty"`
	L1HeaderHistory  [][]byte                      `protobuf:"bytes,11,rep,name=l1_header_history,json=l1HeaderHistory,proto3" json:"l1_header_history,omitempty"`
}

func (m *Misbehaviour) Reset()         { *m = Misbehaviour{} }
func (m *Misbehaviour) String() string { return proto.CompactTextString(m) }
func (*Misbehaviour) ProtoMessage()    {}
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb29ee24a47cb9c, []int{9}
}
func (m *Misbehaviour) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Misbehaviour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Misbehaviour.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Misbehaviour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehaviour.Merge(m, src)
}
func (m *Misbehaviour) XXX_Size() int {
	return m.Size()
}
func (m *Misbehaviour) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehaviour.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehaviour proto.InternalMessageInfo

func init() {
	proto.RegisterType((*L1Config)(nil), "ibc.lightclients.optimism.v1.L1Config")
	proto.RegisterType((*FaultDisputeGameConfig)(nil), "ibc.lightclients.optimism.v1.FaultDisputeGameConfig")
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.optimism.v1.ClientState")
	proto.RegisterType((*L1Header)(nil), "ibc.lightclients.optimism.v1.L1Header")
	proto.RegisterType((*Derivation)(nil), "ibc.lightclients.optimism.v1.Derivation")
	proto.RegisterType((*Header)(nil), "ibc.lightclients.optimism.v1.Header")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.optimism.v1.ConsensusState")
	proto.RegisterType((*AccountUpdate)(nil), "ibc.lightclients.optimism.v1.AccountUpdate")
	proto.RegisterType((*FaultDisputeGameFactoryProof)(nil), "ibc.lightclients.optimism.v1.FaultDisputeGameFactoryProof")
	proto.RegisterType((*Misbehaviour)(nil), "ibc.lightclients.optimism.v1.Misbehaviour")
}

func init() {
	proto.RegisterFile("ibc/lightclients/optimism/v1/optimism.proto", fileDescriptor_cbb29ee24a47cb9c)
}

var fileDescriptor_cbb29ee24a47cb9c = []byte{
	// 1746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0x16, 0xf5, 0xcb, 0xd2, 0x23, 0x29, 0xc9, 0x1b, 0x5b, 0xa6, 0x54, 0x95, 0x92, 0xe9, 0xc4,
	0x50, 0x93, 0x98, 0xec, 0x32, 0x45, 0x81, 0xf6, 0xd0, 0xc0, 0x96, 0xac, 0x38, 0x09, 0x13, 0x0b,
	0x2b, 0x39, 0x2d, 0x8a, 0xa2, 0xdb, 0xe1, 0xee, 0x23, 0x39, 0xf5, 0xec, 0x0e, 0x31, 0x33, 0xcb,
	0x4a, 0xed, 0xa9, 0xbd, 0x17, 0xe8, 0xb1, 0xff, 0x4b, 0x8f, 0x05, 0x0a, 0xf7, 0x50, 0x20, 0xc7,
	0x9e, 0x9a, 0xd6, 0xfe, 0x1f, 0x7a, 0x2e, 0xe6, 0xc7, 0x52, 0x5c, 0x8a, 0x91, 0x25, 0xf4, 0xb6,
	0xf3, 0xe6, 0xbd, 0x6f, 0x66, 0xde, 0xfb, 0xde, 0x37, 0x43, 0xc2, 0x07, 0xb4, 0x1b, 0xb5, 0x18,
	0xed, 0x0f, 0x54, 0xc4, 0x28, 0xa6, 0x4a, 0xb6, 0xf8, 0x50, 0xd1, 0x84, 0xca, 0xa4, 0x35, 0xf2,
	0xc7, 0xdf, 0xcd, 0xa1, 0xe0, 0x8a, 0x7b, 0x3b, 0xb4, 0x1b, 0x35, 0x27, 0x9d, 0x9b, 0x63, 0x87,
	0x91, 0xbf, 0x7d, 0xa7, 0xcf, 0xfb, 0xdc, 0x38, 0xb6, 0xf4, 0x97, 0x8d, 0xd9, 0xde, 0xd5, 0x0b,
	0x44, 0x5c, 0x60, 0xcb, 0xc6, 0x68, 0x58, 0xfb, 0xe5, 0x1c, 0xea, 0x7d, 0xce, 0xfb, 0x0c, 0x5b,
	0x66, 0xd4, 0xcd, 0x7a, 0xad, 0x38, 0x13, 0x44, 0x51, 0x9e, 0xba, 0xf9, 0xcb, 0x3b, 0x44, 0x35,
	0x40, 0x81, 0x99, 0xd9, 0x61, 0xfe, 0x6d, 0x9d, 0x1b, 0xbf, 0x5f, 0x82, 0x95, 0x8e, 0x7f, 0xc0,
	0xd3, 0x1e, 0xed, 0x7b, 0x3f, 0x84, 0x7b, 0x7d, 0x4c, 0x51, 0x52, 0x19, 0x8e, 0x08, 0xa3, 0x31,
	0x51, 0x5c, 0xc8, 0x50, 0x70, 0xae, 0x6a, 0xa5, 0xbd, 0xd2, 0x7e, 0x25, 0xb8, 0xeb, 0xa6, 0xbf,
	0x1a, 0xcf, 0x06, 0x9c, 0x2b, 0xef, 0x29, 0xec, 0x26, 0x34, 0x0d, 0xe5, 0x79, 0x1a, 0x85, 0x11,
	0x4f, 0x12, 0xaa, 0x14, 0x62, 0x38, 0x24, 0x42, 0xd1, 0x88, 0x0e, 0x49, 0xaa, 0x64, 0x6d, 0x7e,
	0xaf, 0xb4, 0xbf, 0x18, 0xec, 0x24, 0x34, 0x3d, 0x39, 0x4f, 0xa3, 0x83, 0xdc, 0xe9, 0x78, 0xc2,
	0xc7, 0xbb, 0x0f, 0x95, 0x7c, 0x79, 0x45, 0x13, 0xac, 0x2d, 0x98, 0x98, 0xb2, 0xb3, 0x9d, 0xd2,
	0x04, 0xbd, 0x17, 0xb0, 0xde, 0xe3, 0xe2, 0xa5, 0xc6, 0x26, 0x09, 0x2a, 0x14, 0xb2, 0xb6, 0xb8,
	0x57, 0xda, 0x2f, 0xb7, 0x3f, 0x6c, 0x5e, 0x4a, 0xf5, 0xf8, 0xa4, 0x23, 0xbf, 0x79, 0xc4, 0xc5,
	0xcb, 0xe3, 0x71, 0x4c, 0xb0, 0xd6, 0x2b, 0x8c, 0xbd, 0x7d, 0xd8, 0x90, 0x18, 0xf1, 0x34, 0x96,
	0xe1, 0x10, 0x45, 0x28, 0x19, 0x57, 0xb5, 0x25, 0xb3, 0xfa, 0x9a, 0xb3, 0x1f, 0xa3, 0x38, 0x61,
	0x5c, 0x79, 0x0f, 0x61, 0x5d, 0xcf, 0x5a, 0x3f, 0x1c, 0xf2, 0x68, 0x50, 0x5b, 0x36, 0x8e, 0x55,
	0x63, 0x3e, 0x46, 0xf1, 0x54, 0x1b, 0xbd, 0x23, 0xd8, 0x33, 0xb3, 0x0e, 0x70, 0x2a, 0x33, 0x28,
	0x28, 0x8f, 0x6b, 0xb7, 0x6c, 0x4e, 0xac, 0x9f, 0x5e, 0xa0, 0x90, 0x19, 0xe3, 0xe3, 0x7d, 0x02,
	0x65, 0x25, 0x32, 0xa9, 0x42, 0x86, 0x23, 0x64, 0xb5, 0x15, 0x73, 0xd8, 0x87, 0x6f, 0x39, 0xac,
	0x20, 0x91, 0xe6, 0x43, 0x00, 0x26, 0xb4, 0xa3, 0x23, 0xbd, 0x0e, 0xac, 0x9b, 0x11, 0x4d, 0xfb,
	0xf9, 0xfa, 0xab, 0x06, 0x6c, 0xab, 0x69, 0xf9, 0xd4, 0xcc, 0xf9, 0xd4, 0x3c, 0x74, 0x7c, 0x7a,
	0xb2, 0xf2, 0xea, 0x5f, 0xbb, 0x73, 0x7f, 0xfe, 0x66, 0xb7, 0x14, 0xac, 0xe5, 0xb1, 0x6e, 0x5b,
	0x9f, 0xc3, 0x7a, 0x42, 0xce, 0xc2, 0x88, 0xf1, 0xe8, 0x65, 0x18, 0x0b, 0xda, 0x53, 0x35, 0xb8,
	0x3e, 0x5a, 0x35, 0x21, 0x67, 0x07, 0x3a, 0xf4, 0x50, 0x47, 0x36, 0xfe, 0xb1, 0x00, 0x9b, 0x47,
	0x24, 0x63, 0xea, 0x90, 0xca, 0x61, 0xa6, 0xf0, 0x13, 0x92, 0xa0, 0x63, 0xe4, 0xc7, 0xb0, 0x13,
	0x5b, 0x63, 0xd8, 0x27, 0x09, 0x86, 0x3d, 0x12, 0x29, 0x2e, 0xce, 0x43, 0x12, 0xc7, 0x02, 0xa5,
	0x74, 0xb4, 0xdc, 0x8a, 0x2f, 0x02, 0x8f, 0xac, 0xc7, 0x63, 0xeb, 0xe0, 0xbd, 0x80, 0xfd, 0x99,
	0x00, 0x8a, 0x88, 0x3e, 0xaa, 0x50, 0x2a, 0x2e, 0x48, 0x1f, 0x6d, 0xc5, 0x35, 0x47, 0xab, 0xc1,
	0x83, 0xcb, 0x60, 0xa7, 0xc6, 0xf9, 0xc4, 0xfa, 0x1a, 0x1a, 0x3c, 0x81, 0x7a, 0x4f, 0xef, 0x38,
	0x2c, 0x80, 0x4b, 0x45, 0x54, 0x26, 0x2d, 0xd8, 0x82, 0x01, 0xdb, 0xee, 0x4d, 0x9d, 0xeb, 0xc4,
	0xb8, 0x18, 0x8c, 0xe7, 0xf0, 0xde, 0xd5, 0x18, 0x21, 0xef, 0xf5, 0x24, 0x2a, 0xc3, 0xf0, 0x6a,
	0xb0, 0xf7, 0xed, 0x50, 0xcf, 0x8d, 0x9f, 0xf7, 0x15, 0x7c, 0x6f, 0x06, 0x60, 0x24, 0x90, 0x28,
	0x8c, 0x43, 0xa2, 0x0a, 0xa0, 0x4b, 0xf6, 0xb0, 0xd3, 0xa0, 0x07, 0xd6, 0xfb, 0xb1, 0x9a, 0xc0,
	0x6d, 0xc2, 0x3b, 0x6e, 0x57, 0x31, 0xf6, 0x30, 0x8d, 0x51, 0x84, 0xbf, 0xa1, 0xa9, 0xe1, 0x7d,
	0x35, 0xb8, 0x6d, 0xa7, 0x0e, 0xdd, 0xcc, 0x4f, 0x69, 0xda, 0xf8, 0xeb, 0x02, 0x94, 0x0f, 0x0c,
	0x2f, 0xf5, 0x16, 0xd1, 0xdb, 0x82, 0x95, 0x68, 0x40, 0x68, 0x1a, 0xd2, 0xd8, 0x14, 0x6c, 0x31,
	0xb8, 0x65, 0xc6, 0x9f, 0xc6, 0xde, 0xfb, 0x70, 0x9b, 0x76, 0x23, 0x53, 0x06, 0x1c, 0x17, 0x75,
	0xde, 0x14, 0x75, 0x9d, 0x76, 0x23, 0x9d, 0x72, 0xcc, 0x4b, 0xf9, 0x7d, 0xb8, 0xa3, 0x7d, 0x6d,
	0x1b, 0x25, 0x9a, 0xf5, 0x17, 0x99, 0xae, 0x04, 0x1e, 0xed, 0xba, 0xe6, 0x31, 0x53, 0x26, 0xc3,
	0x1f, 0x43, 0x95, 0x11, 0x85, 0x52, 0x85, 0x03, 0xd4, 0xcd, 0xe2, 0xb4, 0x62, 0xdb, 0xb4, 0x8f,
	0x96, 0xd8, 0xa6, 0x13, 0xd6, 0x91, 0xdf, 0x7c, 0x66, 0x3c, 0x82, 0x8a, 0x0d, 0xb0, 0x23, 0x6f,
	0x13, 0x96, 0x7b, 0x82, 0xff, 0x16, 0x53, 0x93, 0xae, 0x95, 0xc0, 0x8d, 0xbc, 0x0f, 0xc1, 0x13,
	0x9c, 0xb1, 0x6c, 0x18, 0x46, 0x86, 0xa7, 0xe1, 0xaf, 0x25, 0xb7, 0x09, 0xa9, 0x04, 0x1b, 0x76,
	0xc6, 0x12, 0xf8, 0x33, 0xc9, 0x53, 0xef, 0x00, 0x56, 0x99, 0xef, 0x3c, 0x4d, 0xd3, 0xcf, 0xec,
	0xe0, 0x89, 0x9b, 0xa1, 0x99, 0x2b, 0x72, 0xb0, 0xc2, 0x72, 0x6d, 0xe6, 0xb0, 0x35, 0xab, 0xb8,
	0x16, 0xd4, 0xca, 0xc2, 0x0f, 0xae, 0x06, 0x9d, 0xdd, 0x62, 0xc1, 0x66, 0x6f, 0xa6, 0xbd, 0xf1,
	0xb7, 0x79, 0x7d, 0x33, 0x3c, 0x43, 0x12, 0xa3, 0xf0, 0x06, 0xb0, 0x69, 0x14, 0x00, 0xe3, 0x29,
	0x2d, 0x33, 0x05, 0x2d, 0xb7, 0xdb, 0x57, 0x2b, 0xd2, 0xa9, 0x8d, 0x2d, 0x08, 0x5c, 0x70, 0x47,
	0xcd, 0xb0, 0x7a, 0x3f, 0x83, 0x8d, 0x88, 0xa7, 0x12, 0x53, 0x99, 0xc9, 0x30, 0x1b, 0xc6, 0x44,
	0xa1, 0x21, 0x44, 0xb9, 0xfd, 0xe8, 0xea, 0x35, 0x0e, 0xf2, 0xa8, 0x17, 0x26, 0x28, 0x58, 0x8f,
	0x8a, 0x06, 0x8d, 0x8c, 0x67, 0x18, 0x65, 0x5a, 0x8c, 0x72, 0xe4, 0x85, 0xeb, 0x20, 0x3f, 0xcd,
	0xa3, 0x72, 0x64, 0x2c, 0x1a, 0xbc, 0x1d, 0x58, 0xd5, 0x17, 0x96, 0x54, 0x24, 0x19, 0x1a, 0x8e,
	0x2d, 0x06, 0x17, 0x86, 0xc6, 0x1f, 0x4b, 0x00, 0x87, 0x28, 0xe8, 0xc8, 0xc8, 0xa0, 0xe7, 0xc3,
	0x5d, 0xd2, 0x17, 0x88, 0x71, 0xc8, 0xda, 0x21, 0xcf, 0xd4, 0x30, 0x53, 0x93, 0x57, 0xac, 0x67,
	0x27, 0x3b, 0xed, 0xe7, 0x66, 0xca, 0xdc, 0xaf, 0xef, 0xc2, 0xda, 0x94, 0xaf, 0x6d, 0x91, 0x0a,
	0x9b, 0xf4, 0x7a, 0x08, 0xeb, 0xac, 0x1d, 0x76, 0x8d, 0x24, 0xa7, 0x59, 0xd2, 0x45, 0xe1, 0x6e,
	0xd0, 0x2a, 0x6b, 0x3f, 0xd1, 0xd6, 0x2f, 0x8d, 0xb1, 0xf1, 0xf7, 0x05, 0x58, 0x76, 0x65, 0x7d,
	0x0c, 0x6b, 0x79, 0x59, 0x5d, 0x87, 0x94, 0xde, 0xda, 0x21, 0x55, 0x17, 0xe1, 0x5a, 0x24, 0x80,
	0x35, 0x12, 0x45, 0x3c, 0x4b, 0x55, 0xb1, 0x5a, 0x1f, 0x5c, 0x4d, 0xc6, 0xc7, 0x36, 0xc6, 0x65,
	0xb4, 0x4a, 0x26, 0x87, 0xde, 0x33, 0x80, 0x78, 0x9c, 0x30, 0x57, 0xa3, 0xfd, 0xab, 0xf1, 0x2e,
	0x12, 0x1c, 0x4c, 0xc4, 0xea, 0xca, 0x0c, 0x05, 0xd2, 0x84, 0xf4, 0xd1, 0xbe, 0x14, 0x2a, 0xc1,
	0x85, 0xc1, 0xfb, 0x15, 0xd4, 0xf2, 0xe3, 0x2b, 0x1e, 0xc6, 0xfa, 0x2d, 0x90, 0xd0, 0x94, 0x4a,
	0x45, 0xa3, 0xda, 0xd2, 0xde, 0xc2, 0x75, 0xfa, 0xd4, 0x26, 0x32, 0xc8, 0xbb, 0xe3, 0x94, 0x1f,
	0x4e, 0xa2, 0x78, 0xbf, 0x84, 0x7b, 0x05, 0x58, 0xbd, 0x8e, 0x55, 0x98, 0xda, 0xf2, 0x8d, 0x16,
	0xb8, 0x5b, 0x80, 0x39, 0xe5, 0x1d, 0x03, 0xd2, 0xf8, 0xcb, 0x3c, 0xac, 0x8d, 0x89, 0x6f, 0xd5,
	0xf6, 0x3e, 0x54, 0xf2, 0x5b, 0x6d, 0x82, 0x56, 0x65, 0x67, 0x33, 0x4c, 0x29, 0xf0, 0x75, 0x7e,
	0x8a, 0xaf, 0xde, 0x2e, 0x94, 0x27, 0xa9, 0x66, 0xe5, 0x15, 0xf8, 0x05, 0xd1, 0xee, 0xc1, 0x2d,
	0xe6, 0x5b, 0xed, 0xb5, 0x64, 0x5f, 0x66, 0xbe, 0xd1, 0xdb, 0x1f, 0xc1, 0x96, 0x16, 0xba, 0x4c,
	0x08, 0x4c, 0xd5, 0xb4, 0x50, 0x2c, 0x19, 0x9c, 0x4d, 0xe6, 0x1f, 0xd8, 0xf9, 0x62, 0xdb, 0x7f,
	0x04, 0x9b, 0xcc, 0x0f, 0x53, 0x3c, 0xbb, 0x14, 0x67, 0x55, 0xf5, 0x1d, 0xe6, 0x7f, 0x89, 0x67,
	0x53, 0x41, 0xf7, 0xa1, 0xc2, 0xfc, 0xf0, 0xe2, 0x28, 0xf6, 0x41, 0x55, 0x66, 0xfe, 0xe9, 0xf8,
	0x30, 0xdf, 0x31, 0xda, 0xcb, 0x05, 0xed, 0xd3, 0xd4, 0xc8, 0xe4, 0xa2, 0xd6, 0xd4, 0xe7, 0x66,
	0xdc, 0xe8, 0x41, 0xb5, 0xc0, 0x43, 0xef, 0x01, 0xe4, 0x4c, 0x0c, 0x87, 0x82, 0xf3, 0x9e, 0x4b,
	0x5e, 0xc5, 0x19, 0x8f, 0xb5, 0x4d, 0xdf, 0x43, 0xb9, 0x53, 0x21, 0xd1, 0xf3, 0xae, 0x7f, 0xed,
	0xdc, 0xc9, 0x45, 0xbe, 0x1b, 0xff, 0x5d, 0x80, 0x9d, 0x69, 0xf5, 0x75, 0x4f, 0x0b, 0x0b, 0xf9,
	0x5d, 0x00, 0x7d, 0x8d, 0x16, 0x2a, 0xb6, 0x6a, 0x2c, 0x26, 0xe1, 0xec, 0xdb, 0x5e, 0x41, 0x76,
	0x29, 0xd7, 0x21, 0x37, 0xea, 0xb8, 0x59, 0x4f, 0x26, 0xeb, 0xe0, 0x7d, 0x06, 0x8d, 0x99, 0xab,
	0xe5, 0x87, 0xb5, 0x99, 0xb1, 0xcd, 0x54, 0xbf, 0x0c, 0xe3, 0x0e, 0x6e, 0x0f, 0x36, 0x80, 0xed,
	0x19, 0xb7, 0x56, 0xbe, 0xef, 0xa5, 0x9b, 0xef, 0xfb, 0xde, 0xf4, 0x6d, 0x95, 0xef, 0xfa, 0x08,
	0xf6, 0x66, 0xbe, 0xa6, 0x26, 0xf7, 0x6c, 0xa9, 0xb4, 0x73, 0xf9, 0x21, 0x35, 0xb1, 0xe3, 0xcf,
	0xe1, 0xc1, 0x2c, 0x1c, 0x9e, 0x89, 0xc8, 0x7d, 0xab, 0xf3, 0x21, 0x3a, 0xaa, 0xd5, 0x2f, 0x41,
	0x19, 0x3f, 0xfd, 0x75, 0x7a, 0x3e, 0xc4, 0xc6, 0x37, 0xcb, 0x50, 0xf9, 0x82, 0xca, 0x2e, 0x0e,
	0xc8, 0x88, 0xf2, 0x4c, 0x68, 0x3a, 0xda, 0x33, 0xe6, 0x6f, 0xa1, 0xd5, 0x60, 0xc5, 0x1a, 0x3e,
	0x8d, 0x67, 0xa8, 0xf1, 0xfc, 0x4d, 0xd5, 0x58, 0x3f, 0x4c, 0x50, 0x72, 0x36, 0xb2, 0xd7, 0x4b,
	0xe1, 0x1a, 0xd8, 0xc8, 0x67, 0x3a, 0x6d, 0x7b, 0x13, 0x68, 0x26, 0x8f, 0xbd, 0x27, 0x5b, 0xde,
	0xd6, 0x76, 0x8c, 0x34, 0x71, 0xc7, 0xfc, 0xa1, 0x34, 0x33, 0xcd, 0x39, 0x45, 0x6c, 0x9a, 0x6d,
	0x59, 0x7f, 0x7c, 0xb3, 0xd7, 0xc8, 0x64, 0x3f, 0x5c, 0x2e, 0x51, 0xa1, 0x5b, 0x8e, 0x61, 0xc3,
	0x3d, 0xeb, 0x98, 0x1f, 0x0e, 0x8c, 0x3e, 0x9a, 0xd2, 0x5e, 0x5f, 0x4d, 0xd7, 0x6c, 0xfc, 0xf8,
	0x79, 0xf3, 0x3b, 0x78, 0xaf, 0x47, 0x85, 0x06, 0x6c, 0x1b, 0x85, 0xf6, 0xc3, 0x04, 0xa5, 0x34,
	0xc4, 0x21, 0x52, 0xa2, 0x18, 0x33, 0xf6, 0xd6, 0xcd, 0x19, 0xbb, 0x6b, 0x90, 0x3b, 0xed, 0x53,
	0xde, 0xf1, 0xbf, 0xb0, 0xa8, 0xc7, 0x06, 0x34, 0x67, 0xee, 0x39, 0xbc, 0xcb, 0xc8, 0x35, 0xd6,
	0x5e, 0xb9, 0xf9, 0xda, 0x75, 0x0d, 0x7c, 0xc5, 0xd2, 0xef, 0xc3, 0x6d, 0xd6, 0x76, 0x29, 0x0c,
	0x07, 0x54, 0x77, 0xcb, 0x79, 0x6d, 0x75, 0x6f, 0x41, 0x3f, 0xbf, 0x59, 0xdb, 0x26, 0xe7, 0x99,
	0x35, 0x7b, 0x03, 0xf0, 0x64, 0xd6, 0x35, 0xca, 0x1b, 0xeb, 0x5d, 0xda, 0x5a, 0xc3, 0xff, 0x5d,
	0xeb, 0x8d, 0x31, 0x6a, 0xc7, 0xb7, 0xf5, 0xd5, 0xbb, 0xf2, 0xa7, 0x77, 0x55, 0x76, 0xbb, 0xf2,
	0x0b, 0xbb, 0x7a, 0xf2, 0x8b, 0x57, 0xff, 0xa9, 0xcf, 0xbd, 0x7a, 0x5d, 0x2f, 0x7d, 0xfd, 0xba,
	0x5e, 0xfa, 0xf7, 0xeb, 0x7a, 0xe9, 0x4f, 0x6f, 0xea, 0x73, 0x5f, 0xbf, 0xa9, 0xcf, 0xfd, 0xf3,
	0x4d, 0x7d, 0xee, 0xe7, 0x3f, 0xe9, 0x53, 0x35, 0xc8, 0xba, 0xcd, 0x88, 0x27, 0xad, 0x98, 0x28,
	0x62, 0x7e, 0x76, 0x30, 0xd2, 0x1d, 0xff, 0x4f, 0xf3, 0x88, 0x76, 0xa3, 0x47, 0x02, 0x19, 0x39,
	0x7f, 0x34, 0x14, 0x7c, 0x84, 0xa2, 0x95, 0xf0, 0x38, 0x63, 0xd8, 0xd2, 0x4d, 0x2e, 0xbb, 0xcb,
	0xe6, 0x57, 0xec, 0x47, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x17, 0xed, 0x67, 0x86, 0xf5, 0x11,
	0x00, 0x00,
}

func (m *L1Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L1Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L1Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxClockDrift, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxClockDrift):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOptimism(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TrustingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TrustingPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOptimism(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if m.TrustLevel != nil {
		{
			size, err := m.TrustLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EpochsPerSyncCommitteePeriod != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.EpochsPerSyncCommitteePeriod))
		i--
		dAtA[i] = 0x38
	}
	if m.SlotsPerEpoch != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.SlotsPerEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.SecondsPerSlot != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.SecondsPerSlot))
		i--
		dAtA[i] = 0x28
	}
	if m.ForkParameters != nil {
		{
			size, err := m.ForkParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GenesisTime != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.GenesisTime))
		i--
		dAtA[i] = 0x18
	}
	if m.MinSyncCommitteeParticipants != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.MinSyncCommitteeParticipants))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GenesisValidatorsRoot) > 0 {
		i -= len(m.GenesisValidatorsRoot)
		copy(dAtA[i:], m.GenesisValidatorsRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.GenesisValidatorsRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FaultDisputeGameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaultDisputeGameConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaultDisputeGameConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusDefenderWin != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.StatusDefenderWin))
		i--
		dAtA[i] = 0x30
	}
	if m.FaultDisputeGameCreatedAtSlotOffset != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.FaultDisputeGameCreatedAtSlotOffset))
		i--
		dAtA[i] = 0x28
	}
	if m.FaultDisputeGameStatusSlotOffset != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.FaultDisputeGameStatusSlotOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.FaultDisputeGameStatusSlot != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.FaultDisputeGameStatusSlot))
		i--
		dAtA[i] = 0x18
	}
	if m.DisputeGameFactoryTargetStorageSlot != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.DisputeGameFactoryTargetStorageSlot))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DisputeGameFactoryAddress) > 0 {
		i -= len(m.DisputeGameFactoryAddress)
		copy(dAtA[i:], m.DisputeGameFactoryAddress)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.DisputeGameFactoryAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FaultDisputeGameConfig != nil {
		{
			size, err := m.FaultDisputeGameConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.L1Config != nil {
		{
			size, err := m.L1Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RollupConfigJson) > 0 {
		i -= len(m.RollupConfigJson)
		copy(dAtA[i:], m.RollupConfigJson)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.RollupConfigJson)))
		i--
		dAtA[i] = 0x32
	}
	if m.Frozen {
		i--
		if m.Frozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LatestHeight != nil {
		{
			size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.IbcCommitmentsSlot) > 0 {
		i -= len(m.IbcCommitmentsSlot)
		copy(dAtA[i:], m.IbcCommitmentsSlot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.IbcCommitmentsSlot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IbcStoreAddress) > 0 {
		i -= len(m.IbcStoreAddress)
		copy(dAtA[i:], m.IbcStoreAddress)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.IbcStoreAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *L1Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L1Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L1Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.ExecutionUpdate != nil {
		{
			size, err := m.ExecutionUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConsensusUpdate != nil {
		{
			size, err := m.ConsensusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TrustedSyncCommittee != nil {
		{
			size, err := m.TrustedSyncCommittee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Derivation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Derivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Derivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.L2OutputRoot) > 0 {
		i -= len(m.L2OutputRoot)
		copy(dAtA[i:], m.L2OutputRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.L2OutputRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgreedL2OutputRoot) > 0 {
		i -= len(m.AgreedL2OutputRoot)
		copy(dAtA[i:], m.AgreedL2OutputRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.AgreedL2OutputRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeterministicToLatest) > 0 {
		for iNdEx := len(m.DeterministicToLatest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeterministicToLatest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptimism(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TrustedToDeterministic) > 0 {
		for iNdEx := len(m.TrustedToDeterministic) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedToDeterministic[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptimism(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Preimages) > 0 {
		i -= len(m.Preimages)
		copy(dAtA[i:], m.Preimages)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.Preimages)))
		i--
		dAtA[i] = 0x22
	}
	if m.Derivation != nil {
		{
			size, err := m.Derivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountUpdate != nil {
		{
			size, err := m.AccountUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TrustedHeight != nil {
		{
			size, err := m.TrustedHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L1Origin != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.L1Origin))
		i--
		dAtA[i] = 0x40
	}
	if m.L1Timestamp != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.L1Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.L1NextSyncCommittee) > 0 {
		i -= len(m.L1NextSyncCommittee)
		copy(dAtA[i:], m.L1NextSyncCommittee)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.L1NextSyncCommittee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.L1CurrentSyncCommittee) > 0 {
		i -= len(m.L1CurrentSyncCommittee)
		copy(dAtA[i:], m.L1CurrentSyncCommittee)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.L1CurrentSyncCommittee)))
		i--
		dAtA[i] = 0x2a
	}
	if m.L1Slot != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.L1Slot))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutputRoot) > 0 {
		i -= len(m.OutputRoot)
		copy(dAtA[i:], m.OutputRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.OutputRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StorageRoot) > 0 {
		i -= len(m.StorageRoot)
		copy(dAtA[i:], m.StorageRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.StorageRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountStorageRoot) > 0 {
		i -= len(m.AccountStorageRoot)
		copy(dAtA[i:], m.AccountStorageRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.AccountStorageRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountProof) > 0 {
		i -= len(m.AccountProof)
		copy(dAtA[i:], m.AccountProof)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.AccountProof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FaultDisputeGameFactoryProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaultDisputeGameFactoryProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaultDisputeGameFactoryProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FaultDisputeGameSourceGameType != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.FaultDisputeGameSourceGameType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FaultDisputeGameStorageProof) > 0 {
		i -= len(m.FaultDisputeGameStorageProof)
		copy(dAtA[i:], m.FaultDisputeGameStorageProof)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.FaultDisputeGameStorageProof)))
		i--
		dAtA[i] = 0x32
	}
	if m.FaultDisputeGameAccount != nil {
		{
			size, err := m.FaultDisputeGameAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DisputeGameFactoryStorageProof) > 0 {
		i -= len(m.DisputeGameFactoryStorageProof)
		copy(dAtA[i:], m.DisputeGameFactoryStorageProof)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.DisputeGameFactoryStorageProof)))
		i--
		dAtA[i] = 0x22
	}
	if m.DisputeGameFactoryAccount != nil {
		{
			size, err := m.DisputeGameFactoryAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Misbehaviour) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Misbehaviour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehaviour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L1HeaderHistory) > 0 {
		for iNdEx := len(m.L1HeaderHistory) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.L1HeaderHistory[iNdEx])
			copy(dAtA[i:], m.L1HeaderHistory[iNdEx])
			i = encodeVarintOptimism(dAtA, i, uint64(len(m.L1HeaderHistory[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.SubmittedL1Proof != nil {
		{
			size, err := m.SubmittedL1Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.L2HeaderHistory) > 0 {
		for iNdEx := len(m.L2HeaderHistory) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.L2HeaderHistory[iNdEx])
			copy(dAtA[i:], m.L2HeaderHistory[iNdEx])
			i = encodeVarintOptimism(dAtA, i, uint64(len(m.L2HeaderHistory[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.LastL2ToL1MessagePasserAccount != nil {
		{
			size, err := m.LastL2ToL1MessagePasserAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FirstL2ToL1MessagePasserAccount != nil {
		{
			size, err := m.FirstL2ToL1MessagePasserAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LatestL1Header != nil {
		{
			size, err := m.LatestL1Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FaultDisputeGameFactoryProof != nil {
		{
			size, err := m.FaultDisputeGameFactoryProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResolvedOutputRoot) > 0 {
		i -= len(m.ResolvedOutputRoot)
		copy(dAtA[i:], m.ResolvedOutputRoot)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.ResolvedOutputRoot)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResolvedL2Number != 0 {
		i = encodeVarintOptimism(dAtA, i, uint64(m.ResolvedL2Number))
		i--
		dAtA[i] = 0x18
	}
	if m.TrustedHeight != nil {
		{
			size, err := m.TrustedHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptimism(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintOptimism(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptimism(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptimism(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *L1Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisValidatorsRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.MinSyncCommitteeParticipants != 0 {
		n += 1 + sovOptimism(uint64(m.MinSyncCommitteeParticipants))
	}
	if m.GenesisTime != 0 {
		n += 1 + sovOptimism(uint64(m.GenesisTime))
	}
	if m.ForkParameters != nil {
		l = m.ForkParameters.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.SecondsPerSlot != 0 {
		n += 1 + sovOptimism(uint64(m.SecondsPerSlot))
	}
	if m.SlotsPerEpoch != 0 {
		n += 1 + sovOptimism(uint64(m.SlotsPerEpoch))
	}
	if m.EpochsPerSyncCommitteePeriod != 0 {
		n += 1 + sovOptimism(uint64(m.EpochsPerSyncCommitteePeriod))
	}
	if m.TrustLevel != nil {
		l = m.TrustLevel.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TrustingPeriod)
	n += 1 + l + sovOptimism(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxClockDrift)
	n += 1 + l + sovOptimism(uint64(l))
	return n
}

func (m *FaultDisputeGameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeGameFactoryAddress)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.DisputeGameFactoryTargetStorageSlot != 0 {
		n += 1 + sovOptimism(uint64(m.DisputeGameFactoryTargetStorageSlot))
	}
	if m.FaultDisputeGameStatusSlot != 0 {
		n += 1 + sovOptimism(uint64(m.FaultDisputeGameStatusSlot))
	}
	if m.FaultDisputeGameStatusSlotOffset != 0 {
		n += 1 + sovOptimism(uint64(m.FaultDisputeGameStatusSlotOffset))
	}
	if m.FaultDisputeGameCreatedAtSlotOffset != 0 {
		n += 1 + sovOptimism(uint64(m.FaultDisputeGameCreatedAtSlotOffset))
	}
	if m.StatusDefenderWin != 0 {
		n += 1 + sovOptimism(uint64(m.StatusDefenderWin))
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovOptimism(uint64(m.ChainId))
	}
	l = len(m.IbcStoreAddress)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.IbcCommitmentsSlot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.LatestHeight != nil {
		l = m.LatestHeight.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.Frozen {
		n += 2
	}
	l = len(m.RollupConfigJson)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.L1Config != nil {
		l = m.L1Config.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.FaultDisputeGameConfig != nil {
		l = m.FaultDisputeGameConfig.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	return n
}

func (m *L1Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedSyncCommittee != nil {
		l = m.TrustedSyncCommittee.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.ConsensusUpdate != nil {
		l = m.ConsensusUpdate.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.ExecutionUpdate != nil {
		l = m.ExecutionUpdate.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovOptimism(uint64(m.Timestamp))
	}
	return n
}

func (m *Derivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgreedL2OutputRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.L2OutputRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovOptimism(uint64(m.L2BlockNumber))
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedHeight != nil {
		l = m.TrustedHeight.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.AccountUpdate != nil {
		l = m.AccountUpdate.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.Derivation != nil {
		l = m.Derivation.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.Preimages)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if len(m.TrustedToDeterministic) > 0 {
		for _, e := range m.TrustedToDeterministic {
			l = e.Size()
			n += 1 + l + sovOptimism(uint64(l))
		}
	}
	if len(m.DeterministicToLatest) > 0 {
		for _, e := range m.DeterministicToLatest {
			l = e.Size()
			n += 1 + l + sovOptimism(uint64(l))
		}
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StorageRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovOptimism(uint64(m.Timestamp))
	}
	l = len(m.OutputRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.L1Slot != 0 {
		n += 1 + sovOptimism(uint64(m.L1Slot))
	}
	l = len(m.L1CurrentSyncCommittee)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.L1NextSyncCommittee)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.L1Timestamp != 0 {
		n += 1 + sovOptimism(uint64(m.L1Timestamp))
	}
	if m.L1Origin != 0 {
		n += 1 + sovOptimism(uint64(m.L1Origin))
	}
	return n
}

func (m *AccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountProof)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.AccountStorageRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	return n
}

func (m *FaultDisputeGameFactoryProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.DisputeGameFactoryAccount != nil {
		l = m.DisputeGameFactoryAccount.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.DisputeGameFactoryStorageProof)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.FaultDisputeGameAccount != nil {
		l = m.FaultDisputeGameAccount.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	l = len(m.FaultDisputeGameStorageProof)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.FaultDisputeGameSourceGameType != 0 {
		n += 1 + sovOptimism(uint64(m.FaultDisputeGameSourceGameType))
	}
	return n
}

func (m *Misbehaviour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.TrustedHeight != nil {
		l = m.TrustedHeight.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.ResolvedL2Number != 0 {
		n += 1 + sovOptimism(uint64(m.ResolvedL2Number))
	}
	l = len(m.ResolvedOutputRoot)
	if l > 0 {
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.FaultDisputeGameFactoryProof != nil {
		l = m.FaultDisputeGameFactoryProof.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.LatestL1Header != nil {
		l = m.LatestL1Header.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.FirstL2ToL1MessagePasserAccount != nil {
		l = m.FirstL2ToL1MessagePasserAccount.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if m.LastL2ToL1MessagePasserAccount != nil {
		l = m.LastL2ToL1MessagePasserAccount.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if len(m.L2HeaderHistory) > 0 {
		for _, b := range m.L2HeaderHistory {
			l = len(b)
			n += 1 + l + sovOptimism(uint64(l))
		}
	}
	if m.SubmittedL1Proof != nil {
		l = m.SubmittedL1Proof.Size()
		n += 1 + l + sovOptimism(uint64(l))
	}
	if len(m.L1HeaderHistory) > 0 {
		for _, b := range m.L1HeaderHistory {
			l = len(b)
			n += 1 + l + sovOptimism(uint64(l))
		}
	}
	return n
}

func sovOptimism(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptimism(x uint64) (n int) {
	return sovOptimism(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *L1Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L1Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L1Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorsRoot = append(m.GenesisValidatorsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisValidatorsRoot == nil {
				m.GenesisValidatorsRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSyncCommitteeParticipants", wireType)
			}
			m.MinSyncCommitteeParticipants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSyncCommitteeParticipants |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			m.GenesisTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForkParameters == nil {
				m.ForkParameters = &ForkParameters{}
			}
			if err := m.ForkParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsPerSlot", wireType)
			}
			m.SecondsPerSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsPerSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotsPerEpoch", wireType)
			}
			m.SlotsPerEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotsPerEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsPerSyncCommitteePeriod", wireType)
			}
			m.EpochsPerSyncCommitteePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsPerSyncCommitteePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustLevel == nil {
				m.TrustLevel = &Fraction{}
			}
			if err := m.TrustLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TrustingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClockDrift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxClockDrift, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaultDisputeGameConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaultDisputeGameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaultDisputeGameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeGameFactoryAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeGameFactoryAddress = append(m.DisputeGameFactoryAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.DisputeGameFactoryAddress == nil {
				m.DisputeGameFactoryAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeGameFactoryTargetStorageSlot", wireType)
			}
			m.DisputeGameFactoryTargetStorageSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeGameFactoryTargetStorageSlot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameStatusSlot", wireType)
			}
			m.FaultDisputeGameStatusSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultDisputeGameStatusSlot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameStatusSlotOffset", wireType)
			}
			m.FaultDisputeGameStatusSlotOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultDisputeGameStatusSlotOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameCreatedAtSlotOffset", wireType)
			}
			m.FaultDisputeGameCreatedAtSlotOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultDisputeGameCreatedAtSlotOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDefenderWin", wireType)
			}
			m.StatusDefenderWin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusDefenderWin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcStoreAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcStoreAddress = append(m.IbcStoreAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcStoreAddress == nil {
				m.IbcStoreAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCommitmentsSlot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCommitmentsSlot = append(m.IbcCommitmentsSlot[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcCommitmentsSlot == nil {
				m.IbcCommitmentsSlot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestHeight == nil {
				m.LatestHeight = &types.Height{}
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupConfigJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupConfigJson = append(m.RollupConfigJson[:0], dAtA[iNdEx:postIndex]...)
			if m.RollupConfigJson == nil {
				m.RollupConfigJson = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L1Config == nil {
				m.L1Config = &L1Config{}
			}
			if err := m.L1Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaultDisputeGameConfig == nil {
				m.FaultDisputeGameConfig = &FaultDisputeGameConfig{}
			}
			if err := m.FaultDisputeGameConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L1Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L1Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L1Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedSyncCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedSyncCommittee == nil {
				m.TrustedSyncCommittee = &TrustedSyncCommittee{}
			}
			if err := m.TrustedSyncCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusUpdate == nil {
				m.ConsensusUpdate = &ConsensusUpdate{}
			}
			if err := m.ConsensusUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionUpdate == nil {
				m.ExecutionUpdate = &ExecutionUpdate{}
			}
			if err := m.ExecutionUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Derivation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Derivation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Derivation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreedL2OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgreedL2OutputRoot = append(m.AgreedL2OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AgreedL2OutputRoot == nil {
				m.AgreedL2OutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2OutputRoot = append(m.L2OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.L2OutputRoot == nil {
				m.L2OutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedHeight == nil {
				m.TrustedHeight = &types.Height{}
			}
			if err := m.TrustedHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountUpdate == nil {
				m.AccountUpdate = &AccountUpdate{}
			}
			if err := m.AccountUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Derivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Derivation == nil {
				m.Derivation = &Derivation{}
			}
			if err := m.Derivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preimages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preimages = append(m.Preimages[:0], dAtA[iNdEx:postIndex]...)
			if m.Preimages == nil {
				m.Preimages = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedToDeterministic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedToDeterministic = append(m.TrustedToDeterministic, &L1Header{})
			if err := m.TrustedToDeterministic[len(m.TrustedToDeterministic)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeterministicToLatest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeterministicToLatest = append(m.DeterministicToLatest, &L1Header{})
			if err := m.DeterministicToLatest[len(m.DeterministicToLatest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageRoot = append(m.StorageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StorageRoot == nil {
				m.StorageRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputRoot = append(m.OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputRoot == nil {
				m.OutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Slot", wireType)
			}
			m.L1Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1CurrentSyncCommittee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1CurrentSyncCommittee = append(m.L1CurrentSyncCommittee[:0], dAtA[iNdEx:postIndex]...)
			if m.L1CurrentSyncCommittee == nil {
				m.L1CurrentSyncCommittee = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1NextSyncCommittee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1NextSyncCommittee = append(m.L1NextSyncCommittee[:0], dAtA[iNdEx:postIndex]...)
			if m.L1NextSyncCommittee == nil {
				m.L1NextSyncCommittee = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Timestamp", wireType)
			}
			m.L1Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Origin", wireType)
			}
			m.L1Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Origin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountProof = append(m.AccountProof[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountProof == nil {
				m.AccountProof = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountStorageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountStorageRoot = append(m.AccountStorageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountStorageRoot == nil {
				m.AccountStorageRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaultDisputeGameFactoryProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaultDisputeGameFactoryProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaultDisputeGameFactoryProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeGameFactoryAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisputeGameFactoryAccount == nil {
				m.DisputeGameFactoryAccount = &AccountUpdate{}
			}
			if err := m.DisputeGameFactoryAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeGameFactoryStorageProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeGameFactoryStorageProof = append(m.DisputeGameFactoryStorageProof[:0], dAtA[iNdEx:postIndex]...)
			if m.DisputeGameFactoryStorageProof == nil {
				m.DisputeGameFactoryStorageProof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaultDisputeGameAccount == nil {
				m.FaultDisputeGameAccount = &AccountUpdate{}
			}
			if err := m.FaultDisputeGameAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameStorageProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaultDisputeGameStorageProof = append(m.FaultDisputeGameStorageProof[:0], dAtA[iNdEx:postIndex]...)
			if m.FaultDisputeGameStorageProof == nil {
				m.FaultDisputeGameStorageProof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameSourceGameType", wireType)
			}
			m.FaultDisputeGameSourceGameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultDisputeGameSourceGameType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Misbehaviour) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misbehaviour: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misbehaviour: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedHeight == nil {
				m.TrustedHeight = &types.Height{}
			}
			if err := m.TrustedHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedL2Number", wireType)
			}
			m.ResolvedL2Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedL2Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedOutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedOutputRoot = append(m.ResolvedOutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ResolvedOutputRoot == nil {
				m.ResolvedOutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDisputeGameFactoryProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaultDisputeGameFactoryProof == nil {
				m.FaultDisputeGameFactoryProof = &FaultDisputeGameFactoryProof{}
			}
			if err := m.FaultDisputeGameFactoryProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestL1Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestL1Header == nil {
				m.LatestL1Header = &L1Header{}
			}
			if err := m.LatestL1Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstL2ToL1MessagePasserAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstL2ToL1MessagePasserAccount == nil {
				m.FirstL2ToL1MessagePasserAccount = &AccountUpdate{}
			}
			if err := m.FirstL2ToL1MessagePasserAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastL2ToL1MessagePasserAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastL2ToL1MessagePasserAccount == nil {
				m.LastL2ToL1MessagePasserAccount = &AccountUpdate{}
			}
			if err := m.LastL2ToL1MessagePasserAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2HeaderHistory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2HeaderHistory = append(m.L2HeaderHistory, make([]byte, postIndex-iNdEx))
			copy(m.L2HeaderHistory[len(m.L2HeaderHistory)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedL1Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmittedL1Proof == nil {
				m.SubmittedL1Proof = &FaultDisputeGameFactoryProof{}
			}
			if err := m.SubmittedL1Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1HeaderHistory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptimism
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptimism
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1HeaderHistory = append(m.L1HeaderHistory, make([]byte, postIndex-iNdEx))
			copy(m.L1HeaderHistory[len(m.L1HeaderHistory)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptimism(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptimism
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptimism(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptimism
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptimism
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptimism
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptimism
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptimism
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptimism        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptimism          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptimism = fmt.Errorf("proto: unexpected end of group")
)

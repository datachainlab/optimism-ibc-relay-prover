// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/provers/optimism/config/config.proto

package config

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/datachainlab/optimism-ibc-relay-prover/module/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProverConfig struct {
	TrustingPeriod                time.Duration     `protobuf:"bytes,1,opt,name=trusting_period,json=trustingPeriod,proto3,stdduration" json:"trusting_period"`
	L1MaxClockDrift               time.Duration     `protobuf:"bytes,2,opt,name=l1_max_clock_drift,json=l1MaxClockDrift,proto3,stdduration" json:"l1_max_clock_drift"`
	L2MaxClockDrift               time.Duration     `protobuf:"bytes,3,opt,name=l2_max_clock_drift,json=l2MaxClockDrift,proto3,stdduration" json:"l2_max_clock_drift"`
	RefreshThresholdRate          *types.Fraction   `protobuf:"bytes,4,opt,name=refresh_threshold_rate,json=refreshThresholdRate,proto3" json:"refresh_threshold_rate,omitempty"`
	OpNodeEndpoint                string            `protobuf:"bytes,5,opt,name=op_node_endpoint,json=opNodeEndpoint,proto3" json:"op_node_endpoint,omitempty"`
	L1ExecutionEndpoint           string            `protobuf:"bytes,6,opt,name=l1_execution_endpoint,json=l1ExecutionEndpoint,proto3" json:"l1_execution_endpoint,omitempty"`
	L1BeaconEndpoint              string            `protobuf:"bytes,7,opt,name=l1_beacon_endpoint,json=l1BeaconEndpoint,proto3" json:"l1_beacon_endpoint,omitempty"`
	PreimageMakerEndpoint         string            `protobuf:"bytes,8,opt,name=preimage_maker_endpoint,json=preimageMakerEndpoint,proto3" json:"preimage_maker_endpoint,omitempty"`
	PreimageMakerTimeout          time.Duration     `protobuf:"bytes,9,opt,name=preimage_maker_timeout,json=preimageMakerTimeout,proto3,stdduration" json:"preimage_maker_timeout"`
	MinimalForkSched              map[string]uint64 `protobuf:"bytes,10,rep,name=minimal_fork_sched,json=minimalForkSched,proto3" json:"minimal_fork_sched,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MaxL2NumsForPreimage          uint64            `protobuf:"varint,11,opt,name=max_l2nums_for_preimage,json=maxL2numsForPreimage,proto3" json:"max_l2nums_for_preimage,omitempty"`
	MaxConcurrentPreimageRequests uint64            `protobuf:"varint,12,opt,name=max_concurrent_preimage_requests,json=maxConcurrentPreimageRequests,proto3" json:"max_concurrent_preimage_requests,omitempty"`
}

func (m *ProverConfig) Reset()         { *m = ProverConfig{} }
func (m *ProverConfig) String() string { return proto.CompactTextString(m) }
func (*ProverConfig) ProtoMessage()    {}
func (*ProverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0efbec042dcf5e8, []int{0}
}
func (m *ProverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProverConfig.Merge(m, src)
}
func (m *ProverConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProverConfig proto.InternalMessageInfo

func (m *ProverConfig) GetTrustingPeriod() time.Duration {
	if m != nil {
		return m.TrustingPeriod
	}
	return 0
}

func (m *ProverConfig) GetL1MaxClockDrift() time.Duration {
	if m != nil {
		return m.L1MaxClockDrift
	}
	return 0
}

func (m *ProverConfig) GetL2MaxClockDrift() time.Duration {
	if m != nil {
		return m.L2MaxClockDrift
	}
	return 0
}

func (m *ProverConfig) GetRefreshThresholdRate() *types.Fraction {
	if m != nil {
		return m.RefreshThresholdRate
	}
	return nil
}

func (m *ProverConfig) GetOpNodeEndpoint() string {
	if m != nil {
		return m.OpNodeEndpoint
	}
	return ""
}

func (m *ProverConfig) GetL1ExecutionEndpoint() string {
	if m != nil {
		return m.L1ExecutionEndpoint
	}
	return ""
}

func (m *ProverConfig) GetL1BeaconEndpoint() string {
	if m != nil {
		return m.L1BeaconEndpoint
	}
	return ""
}

func (m *ProverConfig) GetPreimageMakerEndpoint() string {
	if m != nil {
		return m.PreimageMakerEndpoint
	}
	return ""
}

func (m *ProverConfig) GetPreimageMakerTimeout() time.Duration {
	if m != nil {
		return m.PreimageMakerTimeout
	}
	return 0
}

func (m *ProverConfig) GetMinimalForkSched() map[string]uint64 {
	if m != nil {
		return m.MinimalForkSched
	}
	return nil
}

func (m *ProverConfig) GetMaxL2NumsForPreimage() uint64 {
	if m != nil {
		return m.MaxL2NumsForPreimage
	}
	return 0
}

func (m *ProverConfig) GetMaxConcurrentPreimageRequests() uint64 {
	if m != nil {
		return m.MaxConcurrentPreimageRequests
	}
	return 0
}

func init() {
	proto.RegisterType((*ProverConfig)(nil), "relayer.provers.optimism.config.ProverConfig")
	proto.RegisterMapType((map[string]uint64)(nil), "relayer.provers.optimism.config.ProverConfig.MinimalForkSchedEntry")
}

func init() {
	proto.RegisterFile("relayer/provers/optimism/config/config.proto", fileDescriptor_a0efbec042dcf5e8)
}

var fileDescriptor_a0efbec042dcf5e8 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x4e, 0xdc, 0x3c,
	0x14, 0xc7, 0x27, 0xdc, 0x31, 0x08, 0x46, 0xf9, 0x06, 0xc8, 0x87, 0xd4, 0x61, 0xd4, 0x45, 0x35,
	0x52, 0xc1, 0xd1, 0x4c, 0xd5, 0xaa, 0xea, 0xa6, 0x12, 0x03, 0x74, 0x03, 0xd5, 0x28, 0x65, 0x43,
	0x55, 0x29, 0x72, 0x92, 0x33, 0x89, 0x35, 0x76, 0x1c, 0x1c, 0x67, 0x34, 0xbc, 0x45, 0x97, 0x7d,
	0x91, 0xbe, 0x03, 0x4b, 0x96, 0x5d, 0xb5, 0x15, 0xbc, 0x48, 0x15, 0xe7, 0xc2, 0xa5, 0x95, 0x4a,
	0x57, 0x3e, 0xf6, 0xf9, 0xff, 0x7f, 0xc7, 0x3a, 0xbe, 0xa0, 0x5d, 0x09, 0x8c, 0x5c, 0x80, 0xb4,
	0x13, 0x29, 0x26, 0x20, 0x53, 0x5b, 0x24, 0x8a, 0x72, 0x9a, 0x72, 0xdb, 0x17, 0xf1, 0x88, 0x86,
	0xe5, 0x80, 0x13, 0x29, 0x94, 0x30, 0x77, 0x4a, 0x35, 0x2e, 0xd5, 0xb8, 0x52, 0xe3, 0x42, 0xb6,
	0xfd, 0x9c, 0x7a, 0xbe, 0xcd, 0x68, 0x18, 0x29, 0x9f, 0x51, 0x88, 0x55, 0x6a, 0x83, 0x8a, 0x40,
	0x42, 0xc6, 0xed, 0x49, 0xaf, 0x8e, 0x0b, 0xda, 0x76, 0x3b, 0x14, 0x22, 0x64, 0x60, 0xeb, 0x99,
	0x97, 0x8d, 0xec, 0x20, 0x93, 0x44, 0x51, 0x11, 0x97, 0xf9, 0x56, 0x28, 0x42, 0xa1, 0x43, 0x3b,
	0x8f, 0x8a, 0xd5, 0xa7, 0x5f, 0x17, 0xd1, 0xea, 0x50, 0x97, 0x1f, 0xe8, 0x9a, 0xe6, 0x31, 0x5a,
	0x57, 0x32, 0x4b, 0x15, 0x8d, 0x43, 0x37, 0x01, 0x49, 0x45, 0x60, 0x19, 0x1d, 0xa3, 0xbb, 0xd2,
	0xff, 0x1f, 0x17, 0x05, 0x70, 0x55, 0x00, 0x1f, 0x94, 0x05, 0xf6, 0x97, 0x2e, 0xbf, 0xef, 0x34,
	0xbe, 0xfc, 0xd8, 0x31, 0x9c, 0xb5, 0xca, 0x3b, 0xd4, 0x56, 0x73, 0x88, 0x4c, 0xd6, 0x73, 0x39,
	0x99, 0xba, 0x3e, 0x13, 0xfe, 0xd8, 0x0d, 0x24, 0x1d, 0x29, 0x6b, 0xe6, 0xf1, 0xc0, 0x75, 0xd6,
	0x3b, 0x21, 0xd3, 0x41, 0x6e, 0x3e, 0xc8, 0xbd, 0x9a, 0xd8, 0xff, 0x8d, 0x38, 0xfb, 0x2f, 0xc4,
	0xfe, 0x7d, 0xe2, 0x27, 0xb4, 0x29, 0x61, 0x24, 0x21, 0x8d, 0x5c, 0x15, 0xe5, 0x83, 0x60, 0x81,
	0x2b, 0x89, 0x02, 0x6b, 0x4e, 0x53, 0x9f, 0x61, 0xea, 0xf9, 0xf8, 0xee, 0x31, 0xe0, 0xba, 0xf5,
	0x93, 0x1e, 0x3e, 0x92, 0xc4, 0xcf, 0x4b, 0x38, 0xad, 0x92, 0x72, 0x5a, 0x41, 0x1c, 0xa2, 0xc0,
	0xec, 0xa2, 0xa6, 0x48, 0xdc, 0x58, 0x04, 0xe0, 0x42, 0x1c, 0x24, 0x82, 0xc6, 0xca, 0x9a, 0xef,
	0x18, 0xdd, 0x65, 0x67, 0x4d, 0x24, 0xef, 0x45, 0x00, 0x87, 0xe5, 0xaa, 0xd9, 0x47, 0x1b, 0xac,
	0xe7, 0xc2, 0x14, 0xfc, 0x2c, 0xe7, 0xdd, 0xca, 0x17, 0xb4, 0xfc, 0x3f, 0xd6, 0x3b, 0xac, 0x72,
	0xb5, 0x67, 0x57, 0xf7, 0xd7, 0x03, 0xe2, 0xdf, 0x35, 0x2c, 0x6a, 0x43, 0x93, 0xf5, 0xf6, 0x75,
	0xa2, 0x56, 0xbf, 0x42, 0x5b, 0x89, 0x04, 0xca, 0x49, 0x08, 0x2e, 0x27, 0x63, 0x90, 0xb7, 0x96,
	0x25, 0x6d, 0xd9, 0xa8, 0xd2, 0x27, 0x79, 0xb6, 0xf6, 0x9d, 0xa1, 0xcd, 0x07, 0x3e, 0x45, 0x39,
	0x88, 0x4c, 0x59, 0xcb, 0x8f, 0xef, 0x7b, 0xeb, 0x1e, 0xfb, 0xb4, 0x00, 0x98, 0xe7, 0xc8, 0xe4,
	0x34, 0xa6, 0x9c, 0x30, 0x77, 0x24, 0xe4, 0xd8, 0x4d, 0xfd, 0x08, 0x02, 0x0b, 0x75, 0x66, 0xbb,
	0x2b, 0xfd, 0x01, 0xfe, 0xcb, 0x03, 0xc1, 0x77, 0x6f, 0x2e, 0x3e, 0x29, 0x38, 0x47, 0x42, 0x8e,
	0x3f, 0xe4, 0x94, 0xc3, 0x58, 0xc9, 0x0b, 0xa7, 0xc9, 0x1f, 0x2c, 0x9b, 0x2f, 0xd1, 0x56, 0x7e,
	0x7d, 0x58, 0x3f, 0xce, 0x78, 0x9a, 0x57, 0x75, 0xab, 0x9d, 0x59, 0x2b, 0x1d, 0xa3, 0x3b, 0xe7,
	0xb4, 0x38, 0x99, 0x1e, 0xeb, 0xec, 0x91, 0x90, 0xc3, 0x32, 0x67, 0xbe, 0x43, 0x1d, 0x7d, 0xeb,
	0x44, 0xec, 0x67, 0x52, 0x42, 0xac, 0x6a, 0x9b, 0x2b, 0xe1, 0x3c, 0x83, 0x54, 0xa5, 0xd6, 0xaa,
	0xf6, 0x3f, 0xe1, 0x64, 0x3a, 0xa8, 0x65, 0x15, 0xc0, 0x29, 0x45, 0xdb, 0x03, 0xb4, 0xf1, 0xc7,
	0xad, 0x9a, 0x4d, 0x34, 0x3b, 0x86, 0x0b, 0xfd, 0xdc, 0x96, 0x9d, 0x3c, 0x34, 0x5b, 0x68, 0x7e,
	0x42, 0x58, 0x06, 0xfa, 0xc5, 0xcc, 0x39, 0xc5, 0xe4, 0xcd, 0xcc, 0x6b, 0x63, 0xff, 0xec, 0xf2,
	0xba, 0x6d, 0x5c, 0x5d, 0xb7, 0x8d, 0x9f, 0xd7, 0x6d, 0xe3, 0xf3, 0x4d, 0xbb, 0x71, 0x75, 0xd3,
	0x6e, 0x7c, 0xbb, 0x69, 0x37, 0x3e, 0xbe, 0x0d, 0xa9, 0x8a, 0x32, 0x0f, 0xfb, 0x82, 0xdb, 0x01,
	0x51, 0xc4, 0x8f, 0x08, 0x8d, 0x19, 0xf1, 0xea, 0xbf, 0x68, 0x8f, 0x7a, 0xfe, 0x9e, 0xee, 0xec,
	0x5e, 0xd1, 0x57, 0x9b, 0x8b, 0x20, 0x63, 0x50, 0x7e, 0x4e, 0xde, 0x82, 0x3e, 0xc5, 0x17, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xec, 0xe3, 0xf2, 0xcd, 0x04, 0x00, 0x00,
}

func (m *ProverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxConcurrentPreimageRequests != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxConcurrentPreimageRequests))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxL2NumsForPreimage != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxL2NumsForPreimage))
		i--
		dAtA[i] = 0x58
	}
	if len(m.MinimalForkSched) > 0 {
		for k := range m.MinimalForkSched {
			v := m.MinimalForkSched[k]
			baseI := i
			i = encodeVarintConfig(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConfig(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.PreimageMakerTimeout, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreimageMakerTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintConfig(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if len(m.PreimageMakerEndpoint) > 0 {
		i -= len(m.PreimageMakerEndpoint)
		copy(dAtA[i:], m.PreimageMakerEndpoint)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PreimageMakerEndpoint)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.L1BeaconEndpoint) > 0 {
		i -= len(m.L1BeaconEndpoint)
		copy(dAtA[i:], m.L1BeaconEndpoint)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.L1BeaconEndpoint)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.L1ExecutionEndpoint) > 0 {
		i -= len(m.L1ExecutionEndpoint)
		copy(dAtA[i:], m.L1ExecutionEndpoint)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.L1ExecutionEndpoint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OpNodeEndpoint) > 0 {
		i -= len(m.OpNodeEndpoint)
		copy(dAtA[i:], m.OpNodeEndpoint)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OpNodeEndpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RefreshThresholdRate != nil {
		{
			size, err := m.RefreshThresholdRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.L2MaxClockDrift, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.L2MaxClockDrift):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintConfig(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.L1MaxClockDrift, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.L1MaxClockDrift):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintConfig(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TrustingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TrustingPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintConfig(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TrustingPeriod)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.L1MaxClockDrift)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.L2MaxClockDrift)
	n += 1 + l + sovConfig(uint64(l))
	if m.RefreshThresholdRate != nil {
		l = m.RefreshThresholdRate.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.OpNodeEndpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.L1ExecutionEndpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.L1BeaconEndpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PreimageMakerEndpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreimageMakerTimeout)
	n += 1 + l + sovConfig(uint64(l))
	if len(m.MinimalForkSched) > 0 {
		for k, v := range m.MinimalForkSched {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConfig(uint64(len(k))) + 1 + sovConfig(uint64(v))
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	if m.MaxL2NumsForPreimage != 0 {
		n += 1 + sovConfig(uint64(m.MaxL2NumsForPreimage))
	}
	if m.MaxConcurrentPreimageRequests != 0 {
		n += 1 + sovConfig(uint64(m.MaxConcurrentPreimageRequests))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TrustingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1MaxClockDrift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.L1MaxClockDrift, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2MaxClockDrift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.L2MaxClockDrift, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshThresholdRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshThresholdRate == nil {
				m.RefreshThresholdRate = &types.Fraction{}
			}
			if err := m.RefreshThresholdRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpNodeEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpNodeEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1ExecutionEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1ExecutionEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1BeaconEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1BeaconEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageMakerEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreimageMakerEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageMakerTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.PreimageMakerTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimalForkSched", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimalForkSched == nil {
				m.MinimalForkSched = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConfig
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConfig
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MinimalForkSched[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxL2NumsForPreimage", wireType)
			}
			m.MaxL2NumsForPreimage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxL2NumsForPreimage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrentPreimageRequests", wireType)
			}
			m.MaxConcurrentPreimageRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConcurrentPreimageRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
